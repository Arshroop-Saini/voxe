[
  {
    "name": "GMAIL_ADD_LABEL_TO_EMAIL",
    "description": "Adds and/or removes specified gmail labels for a message; ensure `message id` and all `label ids` are valid (use 'listlabels' for custom label ids).",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "add_label_ids": {
          "default": [],
          "description": "Label IDs to add. For custom labels, obtain IDs via 'listLabels'. System labels (e.g., 'INBOX', 'SPAM') can also be used.",
          "examples": [
            "STARRED",
            "IMPORTANT",
            "Label_123"
          ],
          "items": {
            "type": "string"
          },
          "title": "Add Label Ids",
          "type": "array"
        },
        "message_id": {
          "description": "Immutable ID of the message to modify (e.g., from 'fetchEmails' or 'fetchMessagesByThreadId').",
          "examples": [
            "17f1b2b9c1b2a3d4"
          ],
          "title": "Message Id",
          "type": "string"
        },
        "remove_label_ids": {
          "default": [],
          "description": "Label IDs to remove. For custom labels, obtain IDs via 'listLabels'. System labels can also be used.",
          "examples": [
            "UNREAD",
            "Label_456"
          ],
          "items": {
            "type": "string"
          },
          "title": "Remove Label Ids",
          "type": "array"
        },
        "user_id": {
          "default": "me",
          "description": "User's email address or 'me' for the authenticated user.",
          "examples": [
            "me",
            "user@example.com"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "required": [
        "message_id"
      ],
      "title": "AddLabelToEmailRequest",
      "type": "object"
    }
  },
  {
    "name": "GMAIL_CREATE_EMAIL_DRAFT",
    "description": "Creates a gmail email draft, supporting to/cc/bcc, subject, plain/html body (ensure `is html=true` for html), attachments, and threading.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "bcc": {
          "default": [],
          "description": "'Bcc' (blind carbon copy) recipient email addresses.",
          "examples": [
            "[\"bcc.recipient@example.com\"]"
          ],
          "items": {
            "type": "string"
          },
          "title": "Bcc",
          "type": "array"
        },
        "body": {
          "description": "Email body content (plain text or HTML); `is_html` must be True if HTML.",
          "examples": [
            "Hello Team,\n\nPlease find the attached report for your review.\n\nBest regards,\nYour Name",
            "<h1>Meeting Confirmation</h1><p>This email confirms our meeting scheduled for next Tuesday.</p>"
          ],
          "title": "Body",
          "type": "string"
        },
        "cc": {
          "default": [],
          "description": "'Cc' (carbon copy) recipient email addresses.",
          "examples": [
            "[\"cc.recipient1@example.com\", \"cc.recipient2@example.com\"]"
          ],
          "items": {
            "type": "string"
          },
          "title": "Cc",
          "type": "array"
        },
        "extra_recipients": {
          "default": [],
          "description": "Additional 'To' recipient email addresses.",
          "examples": [
            "[\"jane.doe@example.com\", \"another.recipient@example.com\"]"
          ],
          "items": {
            "type": "string"
          },
          "title": "Extra Recipients",
          "type": "array"
        },
        "is_html": {
          "default": false,
          "description": "Set to True if `body` is HTML, otherwise the action may fail.",
          "examples": [
            "True",
            "False"
          ],
          "title": "Is Html",
          "type": "boolean"
        },
        "recipient_email": {
          "description": "Primary recipient's email address.",
          "examples": [
            "john.doe@example.com"
          ],
          "title": "Recipient Email",
          "type": "string"
        },
        "subject": {
          "description": "Email subject line.",
          "examples": [
            "Project Update Q3",
            "Meeting Reminder"
          ],
          "title": "Subject",
          "type": "string"
        },
        "thread_id": {
          "default": null,
          "description": "ID of an existing Gmail thread to reply to; omit for new thread.",
          "examples": [
            "17f45ec49a9c3f1b"
          ],
          "title": "Thread Id",
          "type": "string"
        },
        "user_id": {
          "default": "me",
          "description": "User's email address or 'me' for the authenticated user.",
          "examples": [
            "me",
            "user@example.com"
          ],
          "title": "User Id",
          "type": "string"
        },
        "attachment_schema_parsed_file": {
          "title": "FileUploadable",
          "type": "string",
          "description": "File to attach to the email."
        }
      },
      "required": [
        "recipient_email",
        "subject",
        "body"
      ],
      "title": "CreateEmailDraftRequest",
      "type": "object"
    }
  },
  {
    "name": "GMAIL_CREATE_LABEL",
    "description": "Creates a new label with a unique name in the specified user's gmail account.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "label_list_visibility": {
          "default": "labelShow",
          "description": "Controls how the label is displayed in the label list in the Gmail sidebar.",
          "examples": [
            "labelShow",
            "labelShowIfUnread",
            "labelHide"
          ],
          "title": "Label List Visibility",
          "type": "string"
        },
        "label_name": {
          "description": "The name for the new label.",
          "examples": [
            "Work",
            "Important Documents",
            "Receipts 2024"
          ],
          "title": "Label Name",
          "type": "string"
        },
        "message_list_visibility": {
          "default": "show",
          "description": "Controls how messages with this label are displayed in the message list.",
          "examples": [
            "show",
            "hide"
          ],
          "title": "Message List Visibility",
          "type": "string"
        },
        "user_id": {
          "default": "me",
          "description": "The email address of the user in whose account the label will be created.",
          "examples": [
            "me",
            "user@example.com"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "required": [
        "label_name"
      ],
      "title": "CreateLabelRequest",
      "type": "object"
    }
  },
  {
    "name": "GMAIL_DELETE_DRAFT",
    "description": "Permanently deletes a specific gmail draft using its id; ensure the draft exists and the user has necessary permissions for the given `user id`.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "draft_id": {
          "description": "Immutable ID of the draft to delete, typically obtained when the draft was created.",
          "examples": [
            "r-8388446164079304564"
          ],
          "title": "Draft Id",
          "type": "string"
        },
        "user_id": {
          "default": "me",
          "description": "User's email address or 'me' for the authenticated user; 'me' is recommended.",
          "examples": [
            "me",
            "user@example.com"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "required": [
        "draft_id"
      ],
      "title": "DeleteDraftRequest",
      "type": "object"
    }
  },
  {
    "name": "GMAIL_DELETE_MESSAGE",
    "description": "Permanently deletes a specific email message by its id from a gmail mailbox; for `user id`, use 'me' for the authenticated user or an email address to which the authenticated user has delegated access.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "message_id": {
          "description": "Identifier of the email message to delete.",
          "examples": [
            "185120e4428ba8cf",
            "17a872b77b9e7a3b"
          ],
          "title": "Message Id",
          "type": "string"
        },
        "user_id": {
          "default": "me",
          "description": "User's email address. The special value 'me' refers to the authenticated user.",
          "examples": [
            "me",
            "user@example.com"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "required": [
        "message_id"
      ],
      "title": "DeleteMessageRequest",
      "type": "object"
    }
  },
  {
    "name": "GMAIL_FETCH_EMAILS",
    "description": "Fetches a list of email messages from a gmail account, supporting filtering, pagination, and optional full content retrieval.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "include_payload": {
          "default": true,
          "description": "Set to true to include full message payload (headers, body, attachments); false for metadata only.",
          "examples": [
            "True",
            "False"
          ],
          "title": "Include Payload",
          "type": "boolean"
        },
        "include_spam_trash": {
          "default": false,
          "description": "Set to true to include messages from 'SPAM' and 'TRASH'.",
          "examples": [
            "True",
            "False"
          ],
          "title": "Include Spam Trash",
          "type": "boolean"
        },
        "label_ids": {
          "description": "Filter by label IDs; only messages with all specified labels are returned. Common IDs: 'INBOX', 'SPAM', 'TRASH', 'UNREAD', 'STARRED', 'IMPORTANT', 'CATEGORY_PERSONAL', 'CATEGORY_SOCIAL', 'CATEGORY_PROMOTIONS', 'CATEGORY_UPDATES', 'CATEGORY_FORUMS'. Use 'listLabels' action for custom IDs.",
          "examples": [
            "['INBOX', 'UNREAD']",
            "['IMPORTANT']",
            "[]"
          ],
          "items": {
            "type": "string"
          },
          "title": "Label Ids",
          "type": "array"
        },
        "max_results": {
          "default": 1,
          "description": "Maximum number of messages to retrieve per page.",
          "examples": [
            "10",
            "100",
            "500"
          ],
          "maximum": 500,
          "minimum": 1,
          "title": "Max Results",
          "type": "integer"
        },
        "page_token": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Token for retrieving a specific page, obtained from a previous response's `nextPageToken`. Omit for the first page.",
          "title": "Page Token",
          "type": "string"
        },
        "query": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Gmail advanced search query (e.g., 'from:user subject:meeting'). Supports operators like 'from:', 'to:', 'subject:', 'label:', 'has:attachment', 'is:unread', 'after:YYYY/MM/DD', 'before:YYYY/MM/DD', AND/OR/NOT. Use quotes for exact phrases. Omit for no query filter.",
          "examples": [
            "from:john@example.com is:unread",
            "subject:meeting has:attachment",
            "after:2024/01/01 before:2024/02/01",
            "is:important OR is:starred",
            "label:work -label:spam"
          ],
          "title": "Query",
          "type": "string"
        },
        "user_id": {
          "default": "me",
          "description": "User's email address or 'me' for the authenticated user.",
          "examples": [
            "me",
            "user@example.com"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "title": "FetchEmailsRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GMAIL_FETCH_MESSAGE_BY_MESSAGE_ID",
    "description": "Fetches a specific email message by its id, provided the `message id` exists and is accessible to the authenticated `user id`.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "format": {
          "default": "full",
          "description": "Format for message content: 'minimal' (ID/labels), 'full' (complete data), 'raw' (base64url string), 'metadata' (ID/labels/headers).",
          "examples": [
            "minimal",
            "full",
            "raw",
            "metadata"
          ],
          "title": "Format",
          "type": "string"
        },
        "message_id": {
          "description": "Unique ID of the email message to retrieve, obtainable from actions like 'List Messages'.",
          "examples": [
            "xsdfe3264vrfw"
          ],
          "minLength": 1,
          "title": "Message Id",
          "type": "string"
        },
        "user_id": {
          "default": "me",
          "description": "User's email address or 'me' for the authenticated user.",
          "examples": [
            "user@example.com",
            "me"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "required": [
        "message_id"
      ],
      "title": "FetchMessageByMessageIdRequest",
      "type": "object"
    }
  },
  {
    "name": "GMAIL_FETCH_MESSAGE_BY_THREAD_ID",
    "description": "Retrieves messages from a gmail thread using its `thread id`, where the thread must be accessible by the specified `user id`.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "page_token": {
          "default": "",
          "description": "Opaque page token for fetching a specific page of messages if results are paginated.",
          "examples": [
            "CiAKGhIKJdealEffectivelyPageToken"
          ],
          "title": "Page Token",
          "type": "string"
        },
        "thread_id": {
          "description": "Unique ID of the thread, obtainable from actions like 'listThreads' or 'fetchEmails'.",
          "examples": [
            "xsdfe3264vrfw"
          ],
          "title": "Thread Id",
          "type": "string"
        },
        "user_id": {
          "default": "me",
          "description": "The email address of the user.",
          "examples": [
            "me",
            "user@example.com"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "required": [
        "thread_id"
      ],
      "title": "FetchMessageByThreadIdRequest",
      "type": "object"
    }
  },
  {
    "name": "GMAIL_GET_ATTACHMENT",
    "description": "Retrieves a specific attachment by id from a message in a user's gmail mailbox, requiring valid message and attachment ids.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "attachment_id": {
          "description": "ID of the attachment to retrieve.",
          "examples": [
            "A_PART0.1_18exampleAttachmentId7f9"
          ],
          "title": "Attachment Id",
          "type": "string"
        },
        "file_name": {
          "description": "Desired filename for the downloaded attachment.",
          "examples": [
            "invoice.pdf",
            "report.docx"
          ],
          "title": "File Name",
          "type": "string"
        },
        "message_id": {
          "description": "Immutable ID of the message containing the attachment.",
          "examples": [
            "18exampleMessageId7f9"
          ],
          "title": "Message Id",
          "type": "string"
        },
        "user_id": {
          "default": "me",
          "description": "User's email address ('me' for authenticated user).",
          "examples": [
            "me",
            "user@example.com"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "required": [
        "message_id",
        "attachment_id",
        "file_name"
      ],
      "title": "GetAttachmentRequest",
      "type": "object"
    }
  },
  {
    "name": "GMAIL_GET_CONTACTS",
    "description": "Fetches contacts (connections) for the authenticated google account, allowing selection of specific data fields and pagination.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "page_token": {
          "description": "Token to retrieve a specific page of results, obtained from 'nextPageToken' in a previous response.",
          "title": "Page Token",
          "type": "string"
        },
        "person_fields": {
          "default": "emailAddresses,names,birthdays,genders",
          "description": "Comma-separated person fields to retrieve for each contact (e.g., 'names,emailAddresses').",
          "examples": [
            "addresses",
            "ageRanges",
            "biographies",
            "birthdays",
            "coverPhotos",
            "emailAddresses",
            "events",
            "genders",
            "imClients",
            "interests",
            "locales",
            "memberships",
            "metadata",
            "names",
            "nicknames",
            "occupations",
            "organizations",
            "phoneNumbers",
            "photos",
            "relations",
            "residences",
            "sipAddresses",
            "skills",
            "urls",
            "userDefined"
          ],
          "title": "Person Fields",
          "type": "string"
        },
        "resource_name": {
          "default": "people/me",
          "description": "Identifier for the person resource whose connections are listed; use 'people/me' for the authenticated user.",
          "title": "Resource Name",
          "type": "string"
        }
      },
      "title": "GetContactsRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GMAIL_GET_PEOPLE",
    "description": "Retrieves either a specific person's details (using `resource name`) or lists 'other contacts' (if `other contacts` is true), with `person fields` specifying the data to return.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "other_contacts": {
          "default": false,
          "description": "If true, retrieves 'Other Contacts' (people interacted with but not explicitly saved), ignoring `resource_name` and enabling pagination/sync. If false, retrieves information for the single person specified by `resource_name`.",
          "title": "Other Contacts",
          "type": "boolean"
        },
        "page_size": {
          "default": 10,
          "description": "The number of 'Other Contacts' to return per page. Applicable only when `other_contacts` is true.",
          "maximum": 1000,
          "minimum": 1,
          "title": "Page Size",
          "type": "integer"
        },
        "page_token": {
          "default": "",
          "description": "An opaque token from a previous response to retrieve the next page of 'Other Contacts' results. Applicable only when `other_contacts` is true and paginating.",
          "title": "Page Token",
          "type": "string"
        },
        "person_fields": {
          "default": "emailAddresses,names,birthdays,genders",
          "description": "A comma-separated field mask to restrict which fields on the person (or persons) are returned. Consult the Google People API documentation for a comprehensive list of valid fields.",
          "examples": [
            "names,emailAddresses",
            "emailAddresses,names,birthdays,genders",
            "addresses,phoneNumbers,metadata"
          ],
          "title": "Person Fields",
          "type": "string"
        },
        "resource_name": {
          "default": "people/me",
          "description": "Resource name identifying the person for whom to retrieve information (like the authenticated user or a specific contact). Used only when `other_contacts` is false.",
          "examples": [
            "people/me",
            "people/c12345678901234567890",
            "people/102345678901234567890"
          ],
          "title": "Resource Name",
          "type": "string"
        },
        "sync_token": {
          "default": "",
          "description": "A token from a previous 'Other Contacts' list call to retrieve only changes since the last sync; leave empty for an initial full sync. Applicable only when `other_contacts` is true.",
          "title": "Sync Token",
          "type": "string"
        }
      },
      "title": "GetPeopleRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GMAIL_GET_PROFILE",
    "description": "Retrieves key gmail profile information (email address, message/thread totals, history id) for a user.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "user_id": {
          "default": "me",
          "description": "The email address of the Gmail user whose profile is to be retrieved, or the special value 'me' to indicate the currently authenticated user.",
          "examples": [
            "user@example.com",
            "me"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "title": "GetProfileRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GMAIL_LIST_DRAFTS",
    "description": "Retrieves a paginated list of email drafts from a user's gmail account.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "max_results": {
          "default": 1,
          "description": "Maximum number of drafts to return per page.",
          "examples": [
            10,
            100,
            500
          ],
          "maximum": 500,
          "minimum": 1,
          "title": "Max Results",
          "type": "integer"
        },
        "page_token": {
          "default": "",
          "description": "Token from a previous response to retrieve a specific page of drafts.",
          "examples": [
            "CiaKJDhWSE5UURE9PSIsImMiOiJhYmMxMjMifQ=="
          ],
          "title": "Page Token",
          "type": "string"
        },
        "user_id": {
          "default": "me",
          "description": "User's mailbox ID; use 'me' for the authenticated user.",
          "examples": [
            "me",
            "user@example.com"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "title": "ListDraftsRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GMAIL_LIST_LABELS",
    "description": "Retrieves a list of all system and user-created labels for the specified gmail account.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "user_id": {
          "default": "me",
          "description": "Identifies the Gmail account (owner's email or 'me' for authenticated user) for which labels will be listed.",
          "examples": [
            "me",
            "user@example.com"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "title": "ListLabelsRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GMAIL_LIST_THREADS",
    "description": "Retrieves a list of email threads from a gmail account, identified by `user id` (email address or 'me'), supporting filtering and pagination.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "max_results": {
          "default": 10,
          "description": "Maximum number of threads to return.",
          "examples": [
            "10",
            "50",
            "100"
          ],
          "maximum": 500,
          "minimum": 1,
          "title": "Max Results",
          "type": "integer"
        },
        "page_token": {
          "default": "",
          "description": "Token from a previous response to retrieve a specific page of results; omit for the first page.",
          "examples": [
            "abcPageToken123"
          ],
          "title": "Page Token",
          "type": "string"
        },
        "query": {
          "default": "",
          "description": "Filter for threads, using Gmail search query syntax (e.g., 'from:user@example.com is:unread').",
          "examples": [
            "is:unread",
            "from:john.doe@example.com",
            "subject:important"
          ],
          "title": "Query",
          "type": "string"
        },
        "user_id": {
          "default": "me",
          "description": "The user's email address or 'me' to specify the authenticated Gmail account.",
          "examples": [
            "me",
            "user@example.com"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "title": "ListThreadsRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GMAIL_MODIFY_THREAD_LABELS",
    "description": "Adds or removes specified existing label ids from a gmail thread, affecting all its messages; ensure the thread id is valid.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "add_label_ids": {
          "default": [],
          "description": "List of label IDs to add to the thread; these labels must exist.",
          "examples": [
            [
              "STARRED",
              "INBOX"
            ]
          ],
          "items": {
            "type": "string"
          },
          "title": "Add Label Ids",
          "type": "array"
        },
        "remove_label_ids": {
          "default": [],
          "description": "List of label IDs to remove from the thread; these labels must exist.",
          "examples": [
            [
              "IMPORTANT",
              "CATEGORY_UPDATES"
            ]
          ],
          "items": {
            "type": "string"
          },
          "title": "Remove Label Ids",
          "type": "array"
        },
        "thread_id": {
          "description": "Immutable ID of the thread to modify.",
          "examples": [
            "18ea7715b619f09c"
          ],
          "title": "Thread Id",
          "type": "string"
        },
        "user_id": {
          "default": "me",
          "description": "User's email address or 'me' for the authenticated user.",
          "examples": [
            "user@example.com",
            "me"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "required": [
        "thread_id"
      ],
      "title": "ModifyThreadLabelsRequest",
      "type": "object"
    }
  },
  {
    "name": "GMAIL_MOVE_TO_TRASH",
    "description": "Moves an existing, non-deleted email message to the trash for the specified user.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "message_id": {
          "description": "Identifier of the email message to move to trash.",
          "examples": [
            "1875f42779f726f2"
          ],
          "title": "Message Id",
          "type": "string"
        },
        "user_id": {
          "default": "me",
          "description": "User's email address or 'me' for the authenticated user.",
          "examples": [
            "user@example.com",
            "me"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "required": [
        "message_id"
      ],
      "title": "MoveToTrashRequest",
      "type": "object"
    }
  },
  {
    "name": "GMAIL_REMOVE_LABEL",
    "description": "Permanently deletes a specific, existing user-created gmail label by its id for a user; cannot delete system labels.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "label_id": {
          "description": "ID of the user-created label to be permanently deleted; must exist and not be a system label.",
          "examples": [
            "Label_123",
            "Label_xyz789"
          ],
          "title": "Label Id",
          "type": "string"
        },
        "user_id": {
          "default": "me",
          "description": "User's email address or 'me' for the authenticated user.",
          "examples": [
            "me",
            "user@example.com"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "required": [
        "label_id"
      ],
      "title": "RemoveLabelRequest",
      "type": "object"
    }
  },
  {
    "name": "GMAIL_REPLY_TO_THREAD",
    "description": "Sends a reply within a specific gmail thread using the original thread's subject, requiring a valid `thread id` and correctly formatted email addresses.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "bcc": {
          "default": [],
          "description": "BCC recipients' email addresses (hidden from other recipients).",
          "examples": [
            "[\"bcc.recipient@example.com\"]"
          ],
          "items": {
            "type": "string"
          },
          "title": "Bcc",
          "type": "array"
        },
        "cc": {
          "default": [],
          "description": "CC recipients' email addresses.",
          "examples": [
            "[\"cc.recipient1@example.com\", \"cc.recipient2@example.com\"]"
          ],
          "items": {
            "type": "string"
          },
          "title": "Cc",
          "type": "array"
        },
        "extra_recipients": {
          "default": [],
          "description": "Additional 'To' recipients' email addresses.",
          "examples": [
            "[\"jane.doe@example.com\", \"another.person@example.com\"]"
          ],
          "items": {
            "type": "string"
          },
          "title": "Extra Recipients",
          "type": "array"
        },
        "is_html": {
          "default": false,
          "description": "Indicates if `message_body` is HTML; if True, body must be valid HTML, if False, body should not contain HTML tags.",
          "examples": [
            "True",
            "False"
          ],
          "title": "Is Html",
          "type": "boolean"
        },
        "message_body": {
          "description": "Content of the reply message, either plain text or HTML.",
          "examples": [
            "Dear Sir, Nice talking to you. Yours respectfully, John"
          ],
          "title": "Message Body",
          "type": "string"
        },
        "recipient_email": {
          "description": "Primary recipient's email address.",
          "examples": [
            "john@doe.com"
          ],
          "title": "Recipient Email",
          "type": "string"
        },
        "thread_id": {
          "description": "Identifier of the Gmail thread for the reply.",
          "examples": [
            "x53r3vdevff"
          ],
          "title": "Thread Id",
          "type": "string"
        },
        "user_id": {
          "default": "me",
          "description": "Identifier for the user sending the reply; 'me' refers to the authenticated user.",
          "examples": [
            "me",
            "user@example.com"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "required": [
        "thread_id",
        "message_body",
        "recipient_email"
      ],
      "title": "ReplyToThreadRequest",
      "type": "object"
    }
  },
  {
    "name": "GMAIL_SEARCH_PEOPLE",
    "description": "Searches contacts by matching the query against names, nicknames, emails, phone numbers, and organizations, optionally including 'other contacts'.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "other_contacts": {
          "default": false,
          "description": "Include 'Other Contacts' (interacted with but not explicitly saved) in search results; if false, searches only primary contacts.",
          "title": "Other Contacts",
          "type": "boolean"
        },
        "pageSize": {
          "default": 10,
          "description": "Maximum results to return; values >30 are capped to 30 by the API.",
          "maximum": 30,
          "minimum": 0,
          "title": "Page Size",
          "type": "integer"
        },
        "person_fields": {
          "default": "emailAddresses,names,phoneNumbers",
          "description": "Comma-separated fields to return (e.g., 'names,emailAddresses'); see PersonFields enum. If 'other_contacts' is true, only 'emailAddresses', 'names', 'phoneNumbers' are allowed.",
          "examples": [
            "addresses",
            "ageRanges",
            "biographies",
            "birthdays",
            "coverPhotos",
            "emailAddresses",
            "events",
            "genders",
            "imClients",
            "interests",
            "locales",
            "memberships",
            "metadata",
            "names",
            "nicknames",
            "occupations",
            "organizations",
            "phoneNumbers",
            "photos",
            "relations",
            "residences",
            "sipAddresses",
            "skills",
            "urls",
            "userDefined"
          ],
          "title": "Person Fields",
          "type": "string"
        },
        "query": {
          "description": "Matches contact names, nicknames, email addresses, phone numbers, and organization fields.",
          "title": "Query",
          "type": "string"
        }
      },
      "required": [
        "query"
      ],
      "title": "SearchPeopleRequest",
      "type": "object"
    }
  },
  {
    "name": "GMAIL_SEND_EMAIL",
    "description": "Sends an email via gmail api using the authenticated user's google profile display name, requiring `is html=true` if the body contains html and valid `s3key`, `mimetype`, `name` for any attachment.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "bcc": {
          "default": [],
          "description": "Blind Carbon Copy (BCC) recipients' email addresses.",
          "examples": [
            [
              "auditor@example.com"
            ]
          ],
          "items": {
            "type": "string"
          },
          "title": "Bcc",
          "type": "array"
        },
        "body": {
          "description": "Email content (plain text or HTML); if HTML, `is_html` must be `True`.",
          "examples": [
            "Hello team, let's discuss the project updates tomorrow.",
            "<h1>Welcome!</h1><p>Thank you for signing up.</p>"
          ],
          "title": "Body",
          "type": "string"
        },
        "cc": {
          "default": [],
          "description": "Carbon Copy (CC) recipients' email addresses.",
          "examples": [
            [
              "manager@example.com",
              "teamlead@example.com"
            ]
          ],
          "items": {
            "type": "string"
          },
          "title": "Cc",
          "type": "array"
        },
        "extra_recipients": {
          "default": [],
          "description": "Additional 'To' recipients' email addresses (not Cc or Bcc).",
          "examples": [
            [
              "jane.doe@example.com",
              "support@example.com"
            ]
          ],
          "items": {
            "type": "string"
          },
          "title": "Extra Recipients",
          "type": "array"
        },
        "is_html": {
          "default": false,
          "description": "Set to `True` if the email body contains HTML tags.",
          "title": "Is Html",
          "type": "boolean"
        },
        "recipient_email": {
          "description": "Primary recipient's email address.",
          "examples": [
            "john@doe.com"
          ],
          "title": "Recipient Email",
          "type": "string"
        },
        "subject": {
          "default": null,
          "description": "Subject line of the email.",
          "examples": [
            "Project Update Meeting",
            "Your Weekly Newsletter"
          ],
          "title": "Subject",
          "type": "string"
        },
        "user_id": {
          "default": "me",
          "description": "User's email address; the literal 'me' refers to the authenticated user.",
          "examples": [
            "user@example.com",
            "me"
          ],
          "title": "User Id",
          "type": "string"
        },
        "attachment_schema_parsed_file": {
          "title": "FileUploadable",
          "type": "string",
          "description": "File to attach; ensure `s3key`, `mimetype`, and `name` are set if provided. Omit or set to null for no attachment."
        }
      },
      "required": [
        "recipient_email",
        "body"
      ],
      "title": "SendEmailRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLECALENDAR_CREATE_EVENT",
    "description": "Creates an event on a google calendar, needing rfc3339 utc start/end times (end after start) and write access to the calendar.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "attendees": {
          "default": null,
          "description": "List of attendee emails (strings).",
          "items": {
            "type": "string"
          },
          "title": "Attendees",
          "type": "array"
        },
        "calendar_id": {
          "default": "primary",
          "description": "Target calendar: 'primary' for the user's main calendar, or the calendar's email address.",
          "examples": [
            "primary",
            "user@example.com",
            "abcdefghijklmnopqrstuvwxyz@group.calendar.google.com"
          ],
          "title": "Calendar Id",
          "type": "string"
        },
        "create_meeting_room": {
          "default": null,
          "description": "If true, a Google Meet link is created and added to the event. CRITICAL: As of 2024, this REQUIRES a paid Google Workspace account ($13+/month). Personal Gmail accounts will fail with 'Invalid conference type value' error. Solutions: 1) Upgrade to Workspace, 2) Use domain-wide delegation with Workspace user, 3) Use the new Google Meet REST API, or 4) Create events without conferences. See https://github.com/googleapis/google-api-nodejs-client/issues/3234",
          "title": "Create Meeting Room",
          "type": "boolean"
        },
        "description": {
          "default": null,
          "description": "Description of the event. Can contain HTML. Optional.",
          "title": "Description",
          "type": "string"
        },
        "eventType": {
          "default": "default",
          "description": "Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created.",
          "enum": [
            "default",
            "outOfOffice",
            "focusTime",
            "workingLocation"
          ],
          "title": "Event Type",
          "type": "string"
        },
        "event_duration_hour": {
          "default": 0,
          "description": "Number of hours (0-24). Increase by 1 here rather than passing 60 in `event_duration_minutes`",
          "maximum": 24,
          "minimum": 0,
          "title": "Event Duration Hour",
          "type": "integer"
        },
        "event_duration_minutes": {
          "default": 30,
          "description": "Number of minutes (0-59). Make absolutely sure this is less than 60.",
          "maximum": 59,
          "minimum": 0,
          "title": "Event Duration Minutes",
          "type": "integer"
        },
        "guestsCanInviteOthers": {
          "default": null,
          "description": "Whether attendees other than the organizer can invite others to the event.",
          "title": "Guests Can Invite Others",
          "type": "boolean"
        },
        "guestsCanSeeOtherGuests": {
          "default": null,
          "description": "Whether attendees other than the organizer can see who the event's attendees are.",
          "title": "Guests Can See Other Guests",
          "type": "boolean"
        },
        "guests_can_modify": {
          "default": false,
          "description": "If True, guests can modify the event.",
          "title": "Guests Can Modify",
          "type": "boolean"
        },
        "location": {
          "default": null,
          "description": "Geographic location of the event as free-form text.",
          "title": "Location",
          "type": "string"
        },
        "recurrence": {
          "default": null,
          "description": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.",
          "items": {
            "type": "string"
          },
          "title": "Recurrence",
          "type": "array"
        },
        "send_updates": {
          "default": null,
          "description": "Defaults to True. Whether to send updates to the attendees.",
          "title": "Send Updates",
          "type": "boolean"
        },
        "start_datetime": {
          "description": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'",
          "title": "Start Datetime",
          "type": "string"
        },
        "summary": {
          "default": null,
          "description": "Summary (title) of the event.",
          "title": "Summary",
          "type": "string"
        },
        "timezone": {
          "default": null,
          "description": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.",
          "title": "Timezone",
          "type": "string"
        },
        "transparency": {
          "default": "opaque",
          "description": "'opaque' (busy) or 'transparent' (available).",
          "enum": [
            "opaque",
            "transparent"
          ],
          "title": "Transparency",
          "type": "string"
        },
        "visibility": {
          "default": "default",
          "description": "Event visibility: 'default', 'public', 'private', or 'confidential'.",
          "enum": [
            "default",
            "public",
            "private",
            "confidential"
          ],
          "title": "Visibility",
          "type": "string"
        }
      },
      "required": [
        "start_datetime"
      ],
      "title": "CreateEventRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLECALENDAR_DELETE_EVENT",
    "description": "Deletes a specified event by `event id` from a google calendar (`calendar id`); this action is idempotent and raises a 404 error if the event is not found.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "calendar_id": {
          "default": "primary",
          "description": "Identifier of the Google Calendar (e.g., email address, specific ID, or 'primary' for the authenticated user's main calendar) from which the event will be deleted.",
          "examples": [
            "primary",
            "user@example.com",
            "abcsomecalendarid@group.calendar.google.com"
          ],
          "title": "Calendar Id",
          "type": "string"
        },
        "event_id": {
          "description": "Unique identifier of the event to delete, typically obtained upon event creation.",
          "title": "Event Id",
          "type": "string"
        }
      },
      "required": [
        "event_id"
      ],
      "title": "DeleteEventRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLECALENDAR_DUPLICATE_CALENDAR",
    "description": "Creates a new, empty google calendar with the specified title (summary).",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "summary": {
          "default": "",
          "description": "Title for the new Google Calendar to be created. If an empty string is provided, the calendar will be created without a title.",
          "examples": [
            "Project Alpha Tasks",
            "Marketing Team Q4",
            "Personal Appointments"
          ],
          "title": "Summary",
          "type": "string"
        }
      },
      "title": "DuplicateCalendarRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GOOGLECALENDAR_FIND_EVENT",
    "description": "Finds events in a specified google calendar using text query, time ranges (event start/end, last modification), and event types; ensure `timemin` is not chronologically after `timemax` if both are provided.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "calendar_id": {
          "default": "primary",
          "description": "Identifier of the Google Calendar to query. Use 'primary' for the primary calendar of the authenticated user, an email address for a specific user's calendar, or a calendar ID for other calendars.",
          "examples": [
            "primary",
            "user@example.com",
            "abc...@group.calendar.google.com"
          ],
          "title": "Calendar Id",
          "type": "string"
        },
        "event_types": {
          "default": [
            "default",
            "outOfOffice",
            "focusTime",
            "workingLocation"
          ],
          "description": "Event types to include: 'default' (regular event), 'focusTime' (focused work time), 'outOfOffice' (out-of-office time).",
          "examples": [
            "default",
            "focusTime",
            "outOfOffice"
          ],
          "items": {
            "enum": [
              "default",
              "outOfOffice",
              "focusTime",
              "workingLocation"
            ],
            "title": "EventType",
            "type": "string"
          },
          "title": "Event Types",
          "type": "array"
        },
        "max_results": {
          "default": 10,
          "description": "Maximum number of events per page (1-2500).",
          "title": "Max Results",
          "type": "integer"
        },
        "order_by": {
          "default": null,
          "description": "Order of events: 'startTime' (ascending by start time) or 'updated' (ascending by last modification time).",
          "examples": [
            "startTime",
            "updated"
          ],
          "title": "Order By",
          "type": "string"
        },
        "page_token": {
          "default": null,
          "description": "Token from a previous response's `nextPageToken` to fetch the subsequent page of results.",
          "title": "Page Token",
          "type": "string"
        },
        "query": {
          "default": null,
          "description": "Free-text search terms to find events. This query is matched against various event fields including summary, description, location, attendees' details (displayName, email), and organizer's details.",
          "examples": [
            "Project Alpha Review",
            "Birthday Party",
            "Q3 Planning session"
          ],
          "title": "Query",
          "type": "string"
        },
        "show_deleted": {
          "default": null,
          "description": "Include deleted events (status 'cancelled') in the result.",
          "title": "Show Deleted",
          "type": "boolean"
        },
        "single_events": {
          "default": true,
          "description": "Expand recurring events into individual instances. If false, returns master recurring events.",
          "title": "Single Events",
          "type": "boolean"
        },
        "timeMax": {
          "default": null,
          "description": "Upper bound (exclusive) for an event's start time to filter by. Only events starting before this time are included. Accepts multiple formats:\n1. RFC3339 timestamp (e.g., '2024-12-06T13:00:00Z')\n2. Comma-separated date/time parts (e.g., '2024,12,06,13,00,00')\n3. Simple datetime string (e.g., '2024-12-06 13:00:00')",
          "examples": [
            "2024-12-31T23:59:59Z",
            "2025-01-01 10:00:00"
          ],
          "title": "Time Max",
          "type": "string"
        },
        "timeMin": {
          "default": null,
          "description": "Lower bound (exclusive) for an event's end time to filter by. Only events ending after this time are included. Accepts multiple formats:\n1. RFC3339 timestamp (e.g., '2024-12-06T13:00:00Z')\n2. Comma-separated date/time parts (e.g., '2024,12,06,13,00,00')\n3. Simple datetime string (e.g., '2024-12-06 13:00:00')",
          "examples": [
            "2024-01-01T00:00:00Z",
            "2024-06-15 09:00:00"
          ],
          "title": "Time Min",
          "type": "string"
        },
        "updated_min": {
          "default": null,
          "description": "Lower bound (exclusive) for an event's last modification time to filter by. Only events updated after this time are included. When specified, events deleted since this time are also included, regardless of the `show_deleted` parameter. Accepts multiple formats:\n1. RFC3339 timestamp (e.g., '2024-12-06T13:00:00Z')\n2. Comma-separated date/time parts (e.g., '2024,12,06,13,00,00')\n3. Simple datetime string (e.g., '2024-12-06 13:00:00')",
          "examples": [
            "2024-07-01T00:00:00Z"
          ],
          "title": "Updated Min",
          "type": "string"
        }
      },
      "title": "FindEventRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GOOGLECALENDAR_FIND_FREE_SLOTS",
    "description": "Finds free/busy time slots in google calendars for specified calendars within a defined time range (defaults to the current day utc if `time min`/`time max` are omitted), enhancing busy intervals with event details; `time min` must precede `time max` if both are provided.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "calendar_expansion_max": {
          "default": 50,
          "description": "Maximum calendars for which FreeBusy information is provided. Max allowed: 50.",
          "title": "Calendar Expansion Max",
          "type": "integer"
        },
        "group_expansion_max": {
          "default": 100,
          "description": "Maximum calendar identifiers to return for a single group; exceeding this causes an error. Max allowed: 100.",
          "title": "Group Expansion Max",
          "type": "integer"
        },
        "items": {
          "default": [
            "primary"
          ],
          "description": "List of calendar identifiers (primary ID 'primary', user/calendar email, or unique calendar ID) to query for free/busy information.",
          "examples": [
            "primary",
            "user@example.com",
            "unique_calendar_id@group.calendar.google.com"
          ],
          "items": {
            "type": "string"
          },
          "title": "Items",
          "type": "array"
        },
        "time_max": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "End datetime for the query interval. Accepts ISO, comma-separated, or simple datetime formats.",
          "examples": [
            "2024-12-06T18:00:00Z",
            "2024,12,06,18,00,00",
            "2024-12-06 18:00:00"
          ],
          "title": "Time Max",
          "type": "string"
        },
        "time_min": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Start datetime for the query interval. Accepts ISO, comma-separated, or simple datetime formats.",
          "examples": [
            "2024-12-06T13:00:00Z",
            "2024,12,06,13,00,00",
            "2024-12-06 13:00:00"
          ],
          "title": "Time Min",
          "type": "string"
        },
        "timezone": {
          "default": "UTC",
          "description": "IANA timezone identifier (e.g., 'America/New_York', 'Europe/London') for interpreting `time_min` and `time_max` if they lack timezone info, and for expanding recurring events.",
          "examples": [
            "UTC",
            "America/New_York",
            "Europe/Berlin"
          ],
          "title": "Timezone",
          "type": "string"
        }
      },
      "title": "FindFreeSlotsRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GOOGLECALENDAR_GET_CALENDAR",
    "description": "Retrieves a specific google calendar, identified by `calendar id`, to which the authenticated user has access.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "calendar_id": {
          "default": "primary",
          "description": "Identifier of the Google Calendar to retrieve. 'primary' (the default) represents the user's main calendar; other valid identifiers include the calendar's email address.",
          "examples": [
            "primary",
            "user@example.com",
            "en.usa#holiday@group.v.calendar.google.com"
          ],
          "title": "Calendar Id",
          "type": "string"
        }
      },
      "title": "GetCalendarRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GOOGLECALENDAR_GET_CURRENT_DATE_TIME",
    "description": "Gets the current date and time, allowing for a specific timezone offset.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "timezone": {
          "default": 0,
          "description": "Timezone offset from UTC in hours (e.g., 6 for UTC+6, -9 for UTC-9, 5.5 for UTC+5:30). Default 0 is UTC.",
          "examples": [
            "6",
            "-9",
            "0",
            "5.5"
          ],
          "title": "Timezone",
          "type": "number"
        }
      },
      "title": "GetCurrentDateTimeRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GOOGLECALENDAR_LIST_CALENDARS",
    "description": "Retrieves calendars from the user's google calendar list, with options for pagination and filtering.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "max_results": {
          "default": 10,
          "description": "Maximum number of calendars to return per page. Max 250.",
          "examples": [
            25,
            100
          ],
          "title": "Max Results",
          "type": "integer"
        },
        "min_access_role": {
          "default": null,
          "description": "Minimum access role for calendars returned. Valid values: 'freeBusyReader', 'owner', 'reader', 'writer'.",
          "examples": [
            "reader",
            "owner"
          ],
          "title": "Min Access Role",
          "type": "string"
        },
        "page_token": {
          "default": null,
          "description": "Token for the page of results to return, from a previous response.",
          "examples": [
            " nextPageToken123"
          ],
          "title": "Page Token",
          "type": "string"
        },
        "show_deleted": {
          "default": false,
          "description": "Include deleted calendars in the result.",
          "examples": [
            true,
            false
          ],
          "title": "Show Deleted",
          "type": "boolean"
        },
        "show_hidden": {
          "default": false,
          "description": "Include calendars not typically shown in the UI.",
          "examples": [
            true,
            false
          ],
          "title": "Show Hidden",
          "type": "boolean"
        },
        "sync_token": {
          "default": null,
          "description": "Sync token from a previous list request to get only changed entries; showDeleted, showHidden, and pageToken are ignored if provided.",
          "examples": [
            "syncToken123"
          ],
          "title": "Sync Token",
          "type": "string"
        }
      },
      "title": "ListCalendarsRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GOOGLECALENDAR_PATCH_CALENDAR",
    "description": "Partially updates (patches) an existing google calendar, modifying only the fields provided; `summary` is mandatory and cannot be an empty string, and an empty string for `description` or `location` clears them.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "calendar_id": {
          "description": "Identifier of the Google Calendar to update; use 'primary' for the main calendar or a specific ID.",
          "examples": [
            "primary",
            "secondaryCalendarIdAbc...",
            "example@group.calendar.google.com"
          ],
          "title": "Calendar Id",
          "type": "string"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "New description for the calendar.",
          "title": "Description",
          "type": "string"
        },
        "location": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "New geographic location of the calendar (e.g., 'Paris, France').",
          "examples": [
            "Paris, France",
            "London"
          ],
          "title": "Location",
          "type": "string"
        },
        "summary": {
          "description": "New title for the calendar; cannot be an empty string.",
          "examples": [
            "Team Meetings",
            "Project Alpha Milestones"
          ],
          "title": "Summary",
          "type": "string"
        },
        "timezone": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "New IANA Time Zone Database name for the calendar (e.g., 'Europe/Zurich', 'America/New_York').",
          "examples": [
            "Europe/Zurich",
            "America/New_York",
            "Asia/Tokyo"
          ],
          "title": "Timezone",
          "type": "string"
        }
      },
      "required": [
        "calendar_id",
        "summary"
      ],
      "title": "PatchCalendarRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLECALENDAR_PATCH_EVENT",
    "description": "Updates specified fields of an existing event in a google calendar using patch semantics (array fields like `attendees` are fully replaced if provided); ensure the `calendar id` and `event id` are valid and the user has write access to the calendar.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "attendees": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "List of email addresses for attendees. Replaces existing attendees. Provide an empty list to remove all.",
          "examples": [
            [
              "user1@example.com",
              "user2@example.com"
            ],
            []
          ],
          "title": "Attendees",
          "type": "array"
        },
        "calendar_id": {
          "description": "Identifier of the calendar. Use 'primary' for the primary calendar of the logged-in user. To find other calendar IDs, use the `calendarList.list` method.",
          "examples": [
            "primary",
            "secondary_calendar_id"
          ],
          "title": "Calendar Id",
          "type": "string"
        },
        "conference_data_version": {
          "anyOf": [
            {
              "maximum": 1,
              "minimum": 0,
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "API client's conference data support version. Set to 1 to manage conference details (e.g., Google Meet links); 0 (default) ignores conference data.",
          "examples": [
            0,
            1
          ],
          "title": "Conference Data Version",
          "type": "integer"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "New description for the event; can include HTML.",
          "examples": [
            "Weekly team sync meeting to discuss project updates."
          ],
          "title": "Description",
          "type": "string"
        },
        "end_time": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "New end time (RFC3339 timestamp, e.g., '2024-07-01T11:00:00-07:00'). Uses `timezone` if provided, otherwise UTC. For all-day events, use YYYY-MM-DD format (exclusive end date).",
          "examples": [
            "2024-07-01T11:00:00-07:00",
            "2024-07-02"
          ],
          "title": "End Time",
          "type": "string"
        },
        "event_id": {
          "description": "Identifier of the event to update.",
          "examples": [
            "abc123xyz"
          ],
          "title": "Event Id",
          "type": "string"
        },
        "location": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "New geographic location (physical address or virtual meeting link).",
          "examples": [
            "Conference Room B",
            "https://hangouts.google.com/foo"
          ],
          "title": "Location",
          "type": "string"
        },
        "max_attendees": {
          "anyOf": [
            {
              "exclusiveMinimum": 0,
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Maximum attendees in response; does not affect invited count. If more, response includes organizer only. Must be positive.",
          "examples": [
            10,
            100
          ],
          "title": "Max Attendees",
          "type": "integer"
        },
        "send_updates": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Whether to send update notifications to attendees: 'all', 'externalOnly', or 'none'. Uses default user behavior if unspecified.",
          "examples": [
            "all",
            "externalOnly",
            "none"
          ],
          "title": "Send Updates",
          "type": "string"
        },
        "start_time": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "New start time (RFC3339 timestamp, e.g., '2024-07-01T10:00:00-07:00'). Uses `timezone` if provided, otherwise UTC. For all-day events, use YYYY-MM-DD format.",
          "examples": [
            "2024-07-01T10:00:00-07:00",
            "2024-07-01"
          ],
          "title": "Start Time",
          "type": "string"
        },
        "summary": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "New title for the event.",
          "examples": [
            "Updated Team Meeting"
          ],
          "title": "Summary",
          "type": "string"
        },
        "supports_attachments": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Client application supports event attachments. Set to `True` if so.",
          "examples": [
            true,
            false
          ],
          "title": "Supports Attachments",
          "type": "boolean"
        },
        "timezone": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "IANA Time Zone Database name for start/end times (e.g., 'America/Los_Angeles'). Used if `start_time` and `end_time` are provided and not all-day dates; defaults to UTC if unset.",
          "examples": [
            "America/Los_Angeles",
            "Europe/Berlin"
          ],
          "title": "Timezone",
          "type": "string"
        }
      },
      "required": [
        "calendar_id",
        "event_id"
      ],
      "title": "PatchEventRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLECALENDAR_QUICK_ADD",
    "description": "Parses natural language text to quickly create a basic google calendar event with its title, date, and time, suitable for simple scheduling; does not support recurring events or direct attendee addition via parameters, and `calendar id` must be valid if not 'primary'.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "calendar_id": {
          "default": "primary",
          "description": "Identifier of the calendar for the event. Use 'primary' for the main calendar, or provide a specific calendar ID (e.g., email address).",
          "examples": [
            "primary",
            "user@example.com",
            "xxxxxxxxxxxxxxxxx@group.calendar.google.com"
          ],
          "title": "Calendar Id",
          "type": "string"
        },
        "send_updates": {
          "default": "none",
          "description": "Controls whether email notifications about the event creation are sent to attendees.",
          "enum": [
            "all",
            "externalOnly",
            "none"
          ],
          "title": "Send Updates",
          "type": "string"
        },
        "text": {
          "default": "",
          "description": "Natural language input describing the event; Google Calendar parses this for event details like title, date, and time.",
          "examples": [
            "Appointment at Somewhere on June 3rd 10am-10:25am",
            "Dentist appointment tomorrow at 2pm for 45 minutes"
          ],
          "title": "Text",
          "type": "string"
        }
      },
      "title": "QuickAddRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GOOGLECALENDAR_REMOVE_ATTENDEE",
    "description": "Removes an attendee from a specified event in a google calendar; the calendar and event must exist.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "attendee_email": {
          "description": "Email address of the attendee to remove; if the email does not match an existing attendee, the event remains unchanged.",
          "examples": [
            "john@gmail.com"
          ],
          "title": "Attendee Email",
          "type": "string"
        },
        "calendar_id": {
          "default": "primary",
          "description": "Identifier of the Google Calendar to which the event belongs; 'primary' signifies the user's main calendar.",
          "title": "Calendar Id",
          "type": "string"
        },
        "event_id": {
          "description": "Unique identifier of the event.",
          "title": "Event Id",
          "type": "string"
        }
      },
      "required": [
        "event_id",
        "attendee_email"
      ],
      "title": "RemoveAttendeeRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLECALENDAR_SYNC_EVENTS",
    "description": "Synchronizes google calendar events, performing a full sync if no `sync token` is provided or if a 410 gone error (due to an expired token) necessitates it, otherwise performs an incremental sync for events changed since the `sync token` was issued.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "calendar_id": {
          "default": "primary",
          "description": "Google Calendar identifier; 'primary' refers to the authenticated user's main calendar.",
          "examples": [
            "primary",
            "your.email@example.com",
            "xxxxxxxxxx@group.calendar.google.com"
          ],
          "title": "Calendar Id",
          "type": "string"
        },
        "event_types": {
          "default": null,
          "description": "Filters events by specified types (e.g., 'default', 'focusTime', 'outOfOffice', 'workingLocation'). All types returned if omitted.",
          "examples": [
            "['default', 'focusTime']",
            "['outOfOffice']",
            "['default']"
          ],
          "items": {
            "type": "string"
          },
          "title": "Event Types",
          "type": "array"
        },
        "max_results": {
          "default": null,
          "description": "Max events per page (max 2500); Google Calendar's default is used if unspecified.",
          "examples": [
            "100",
            "2500"
          ],
          "title": "Max Results",
          "type": "integer"
        },
        "pageToken": {
          "default": null,
          "description": "Token for paginating results, from a previous response's `nextPageToken`.",
          "examples": [
            "RANDOM_PAGE_TOKEN_STRING"
          ],
          "title": "Page Token",
          "type": "string"
        },
        "single_events": {
          "default": null,
          "description": "If True, expands recurring events into individual instances (excluding master event); otherwise, Google's default handling applies.",
          "examples": [
            "True",
            "False"
          ],
          "title": "Single Events",
          "type": "boolean"
        },
        "sync_token": {
          "default": null,
          "description": "Token for incremental sync, retrieving only changes since issued. A 410 GONE response indicates an expired token, requiring a full sync.",
          "examples": [
            "RANDOM_SYNC_TOKEN_STRING_FROM_PREVIOUS_CALL"
          ],
          "title": "Sync Token",
          "type": "string"
        }
      },
      "title": "SyncEventsRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GOOGLECALENDAR_UPDATE_EVENT",
    "description": "Updates an existing event by `event id` in a google calendar; this is a full put replacement, so provide all desired fields as unspecified ones may be cleared or reset.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "attendees": {
          "default": null,
          "description": "List of attendee emails (strings).",
          "items": {
            "type": "string"
          },
          "title": "Attendees",
          "type": "array"
        },
        "calendar_id": {
          "default": "primary",
          "description": "Identifier of the Google Calendar where the event resides. The value 'primary' targets the user's primary calendar.",
          "examples": [
            "primary",
            "user@example.com",
            "long_calendar_id@group.calendar.google.com"
          ],
          "title": "Calendar Id",
          "type": "string"
        },
        "create_meeting_room": {
          "default": null,
          "description": "If true, a Google Meet link is created and added to the event. CRITICAL: As of 2024, this REQUIRES a paid Google Workspace account ($13+/month). Personal Gmail accounts will fail with 'Invalid conference type value' error. Solutions: 1) Upgrade to Workspace, 2) Use domain-wide delegation with Workspace user, 3) Use the new Google Meet REST API, or 4) Create events without conferences. See https://github.com/googleapis/google-api-nodejs-client/issues/3234",
          "title": "Create Meeting Room",
          "type": "boolean"
        },
        "description": {
          "default": null,
          "description": "Description of the event. Can contain HTML. Optional.",
          "title": "Description",
          "type": "string"
        },
        "eventType": {
          "default": "default",
          "description": "Type of the event, immutable post-creation. Currently, only 'default' and 'workingLocation' can be created.",
          "enum": [
            "default",
            "outOfOffice",
            "focusTime",
            "workingLocation"
          ],
          "title": "Event Type",
          "type": "string"
        },
        "event_duration_hour": {
          "default": 0,
          "description": "Number of hours (0-24). Increase by 1 here rather than passing 60 in `event_duration_minutes`",
          "maximum": 24,
          "minimum": 0,
          "title": "Event Duration Hour",
          "type": "integer"
        },
        "event_duration_minutes": {
          "default": 30,
          "description": "Number of minutes (0-59). Make absolutely sure this is less than 60.",
          "maximum": 59,
          "minimum": 0,
          "title": "Event Duration Minutes",
          "type": "integer"
        },
        "event_id": {
          "description": "The unique identifier of the event to be updated.",
          "examples": [
            "a1b2c3d4e5f6g7h8i9j0k1l2m3"
          ],
          "title": "Event Id",
          "type": "string"
        },
        "guestsCanInviteOthers": {
          "default": null,
          "description": "Whether attendees other than the organizer can invite others to the event.",
          "title": "Guests Can Invite Others",
          "type": "boolean"
        },
        "guestsCanSeeOtherGuests": {
          "default": null,
          "description": "Whether attendees other than the organizer can see who the event's attendees are.",
          "title": "Guests Can See Other Guests",
          "type": "boolean"
        },
        "guests_can_modify": {
          "default": false,
          "description": "If True, guests can modify the event.",
          "title": "Guests Can Modify",
          "type": "boolean"
        },
        "location": {
          "default": null,
          "description": "Geographic location of the event as free-form text.",
          "title": "Location",
          "type": "string"
        },
        "recurrence": {
          "default": null,
          "description": "List of RRULE, EXRULE, RDATE, EXDATE lines for recurring events.",
          "items": {
            "type": "string"
          },
          "title": "Recurrence",
          "type": "array"
        },
        "send_updates": {
          "default": null,
          "description": "Defaults to True. Whether to send updates to the attendees.",
          "title": "Send Updates",
          "type": "boolean"
        },
        "start_datetime": {
          "description": "Naive date/time (YYYY-MM-DDTHH:MM:SS) with NO offsets or Z. e.g. '2025-01-16T13:00:00'",
          "title": "Start Datetime",
          "type": "string"
        },
        "summary": {
          "default": null,
          "description": "Summary (title) of the event.",
          "title": "Summary",
          "type": "string"
        },
        "timezone": {
          "default": null,
          "description": "IANA timezone name (e.g., 'America/New_York'). Required if datetime is naive. If datetime includes timezone info (Z or offset), this field is optional and defaults to UTC.",
          "title": "Timezone",
          "type": "string"
        },
        "transparency": {
          "default": "opaque",
          "description": "'opaque' (busy) or 'transparent' (available).",
          "enum": [
            "opaque",
            "transparent"
          ],
          "title": "Transparency",
          "type": "string"
        },
        "visibility": {
          "default": "default",
          "description": "Event visibility: 'default', 'public', 'private', or 'confidential'.",
          "enum": [
            "default",
            "public",
            "private",
            "confidential"
          ],
          "title": "Visibility",
          "type": "string"
        }
      },
      "required": [
        "start_datetime",
        "event_id"
      ],
      "title": "UpdateEventRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLEDOCS_CREATE_DOCUMENT",
    "description": "Creates a new google docs document using the provided title as filename and inserts the initial text at the beginning if non-empty, returning the document's id and metadata (excluding body content).",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "text": {
          "description": "Initial text content to insert at the beginning of the new document.",
          "examples": [
            "This document outlines the key findings...",
            "## Agenda\n1. Welcome\n2. Presentation\n3. Q&A",
            "Start of the report."
          ],
          "title": "Text",
          "type": "string"
        },
        "title": {
          "description": "Title for the new document, used as its filename in Google Drive.",
          "examples": [
            "Quarterly Business Review",
            "Project Alpha - Brainstorming Notes",
            "My Vacation Itinerary"
          ],
          "title": "Title",
          "type": "string"
        }
      },
      "required": [
        "title",
        "text"
      ],
      "title": "CreateDocumentRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLEDOCS_CREATE_DOCUMENT_MARKDOWN",
    "description": "Creates a new google docs document, optionally initializing it with a title and content provided as markdown text.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "markdown_text": {
          "description": "The initial content for the document, formatted as Markdown. Supports various Markdown elements including headings, lists (nested lists are not supported), tables, images (via publicly accessible URLs), blockquotes, code blocks, and text formatting (bold, italic, etc.). If an empty string is provided, the document will be created with only the title.",
          "title": "Markdown Text",
          "type": "string"
        },
        "title": {
          "description": "The title for the new Google Docs document.",
          "examples": [
            "Meeting Notes Q3",
            "Project Alpha Proposal",
            "My New Story Draft"
          ],
          "title": "Title",
          "type": "string"
        }
      },
      "required": [
        "title",
        "markdown_text"
      ],
      "title": "CreateDocumentMarkdownRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLEDOCS_GET_DOCUMENT_BY_ID",
    "description": "Retrieves an existing google document by its id; will error if the document is not found.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "id": {
          "description": "The unique identifier for the Google Document to be retrieved. This action specifically fetches an existing document and will not create a new one if the ID is not found.",
          "examples": [
            "123abcDeFgHiJkLmNoPqRsTuVwXyZ_0123456789AB"
          ],
          "title": "Id",
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "title": "FindOrCreateDocumentRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLEDOCS_SEARCH_DOCUMENTS",
    "description": "Search for google documents using various filters including name, content, date ranges, and more.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "created_after": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Return documents created after this date. Use RFC 3339 format like '2024-01-01T00:00:00Z'.",
          "examples": [
            "2024-01-01T00:00:00Z",
            "2024-12-01T12:00:00-08:00"
          ],
          "title": "Created After",
          "type": "string"
        },
        "include_trashed": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": false,
          "description": "Whether to include documents in trash. Defaults to False.",
          "title": "Include Trashed",
          "type": "boolean"
        },
        "max_results": {
          "anyOf": [
            {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": 10,
          "description": "Maximum number of documents to return (1-1000). Defaults to 10.",
          "title": "Max Results",
          "type": "integer"
        },
        "modified_after": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Return documents modified after this date. Use RFC 3339 format like '2024-01-01T00:00:00Z'.",
          "examples": [
            "2024-01-01T00:00:00Z",
            "2024-12-01T12:00:00-08:00"
          ],
          "title": "Modified After",
          "type": "string"
        },
        "order_by": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": "modifiedTime desc",
          "description": "Order results by field. Common options: 'modifiedTime desc', 'modifiedTime asc', 'name', 'createdTime desc'",
          "examples": [
            "modifiedTime desc",
            "name",
            "createdTime desc",
            "viewedByMeTime desc"
          ],
          "title": "Order By",
          "type": "string"
        },
        "query": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Search query to filter documents. Can search by name (name contains 'report'), full text content (fullText contains 'important'), or use complex queries with operators like 'and', 'or', 'not'. Leave empty to get all documents.",
          "examples": [
            "name contains 'report'",
            "fullText contains 'important'",
            "name contains 'project' and fullText contains 'status'"
          ],
          "title": "Query",
          "type": "string"
        },
        "shared_with_me": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": false,
          "description": "Whether to return only documents shared with the current user. Defaults to False.",
          "title": "Shared With Me",
          "type": "boolean"
        },
        "starred_only": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": false,
          "description": "Whether to return only starred documents. Defaults to False.",
          "title": "Starred Only",
          "type": "boolean"
        }
      },
      "title": "SearchDocumentsRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GOOGLEDOCS_UPDATE_DOCUMENT_MARKDOWN",
    "description": "Replaces the entire content of an existing google docs document with new markdown text; requires edit permissions for the document.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "description": "Defines the request schema for updating an existing Google Docs document by replacing its content with new text formatted in Markdown.",
      "properties": {
        "document_id": {
          "description": "Identifier of the Google Docs document to update, found in the document's URL.",
          "title": "Document Id",
          "type": "string"
        },
        "new_markdown_text": {
          "description": "Markdown content that will replace the document's entire existing content. Supports standard Markdown features.",
          "examples": [
            "# Document Title\n\nThis is a paragraph with **bold** and *italic* text.\n\n- Unordered list item 1\n- Unordered list item 2\n\n1. Ordered list item 1\n2. Ordered list item 2\n\nAn image: ![Alt text for image](https://www.example.com/image.png)",
            "## Advanced Markdown\n\n\n# Example Python code\ndef greet(name):\n    print(f'Hello, {name}!')\ngreet('World')\n\n\n| Column A | Column B |\n|----------|----------|\n|   Data 1 |   Data 2 |\n|   Data 3 |   Data 4 |\n\n> This is a blockquote."
          ],
          "title": "New Markdown Text",
          "type": "string"
        }
      },
      "required": [
        "document_id",
        "new_markdown_text"
      ],
      "title": "UpdateDocumentMarkdownRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLEDOCS_UPDATE_EXISTING_DOCUMENT",
    "description": "Applies programmatic edits, such as text insertion, deletion, or formatting, to a specified google doc using the `batchupdate` api method.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "description": "Request model for updating an existing Google Docs document with specified edit operations.",
      "properties": {
        "document_id": {
          "description": "The unique identifier of the Google Docs document to be updated.",
          "examples": [
            "12345abcdef",
            "your_document_id_here"
          ],
          "title": "Document Id",
          "type": "string"
        },
        "editDocs": {
          "description": "Requests conforming to the Google Docs API `batchUpdate` method, where each item specifies an operation. For full details and more request types, see https://developers.google.com/docs/api/reference/rest/v1/documents/batchUpdate.\nFor example, to insert text at the beginning of the document:\n[\n  {\n    \"insertText\": {\n      \"text\": \"This is a new paragraph.\\n\",\n      \"location\": {\n        \"index\": 1\n      }\n    }\n  }\n]\n\nTo delete a paragraph by its index:\n[{\n  \"deleteContentRange\": {\n    \"range\": {\n      \"startIndex\": 1,\n      \"endIndex\": 20\n    }\n  }\n}]\n\nTo replace all text:\n[{\n  \"replaceAllText\": {\n    \"containsText\": {\n      \"text\": \"old text\"\n    },\n    \"replaceText\": \"new text\"\n  }\n}]",
          "items": {
            "type": "object"
          },
          "title": "Edit Docs",
          "type": "array"
        }
      },
      "required": [
        "document_id",
        "editDocs"
      ],
      "title": "DocumentRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLEDRIVE_ADD_FILE_SHARING_PREFERENCE",
    "description": "Modifies sharing permissions for an existing google drive file, granting a specified role to a user, group, domain, or 'anyone'.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "domain": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Domain to grant permission to (e.g., 'example.com'). Required if 'type' is 'domain'.",
          "examples": [
            "example.com"
          ],
          "title": "Domain",
          "type": "string"
        },
        "email_address": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Email address of the user or group. Required if 'type' is 'user' or 'group'.",
          "examples": [
            "user@example.com"
          ],
          "title": "Email Address",
          "type": "string"
        },
        "file_id": {
          "description": "Unique identifier of the file to update sharing settings for.",
          "examples": [
            "zcfwrt543rgrey5h5jh4wgefbf"
          ],
          "title": "File Id",
          "type": "string"
        },
        "role": {
          "description": "Permission role to grant.",
          "examples": [
            "reader",
            "writer",
            "commenter"
          ],
          "pattern": "^(owner|organizer|fileOrganizer|writer|commenter|reader)$",
          "title": "Role",
          "type": "string"
        },
        "type": {
          "description": "Type of grantee for the permission.",
          "examples": [
            "user",
            "group",
            "domain",
            "anyone"
          ],
          "pattern": "^(user|group|domain|anyone)$",
          "title": "Type",
          "type": "string"
        }
      },
      "required": [
        "file_id",
        "role",
        "type"
      ],
      "title": "AddFileSharingPreferenceRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLEDRIVE_COPY_FILE",
    "description": "Duplicates an existing file in google drive, identified by its `file id`.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "file_id": {
          "description": "The unique identifier for the file on Google Drive that you want to copy. This ID can be retrieved from the file's shareable link or via other Google Drive API calls.",
          "examples": [
            "1A2b3C4d5E6fG7h8I9j0KlMNOPqRstUVW",
            "0X1a2B3c4D5e6F7g8H9i0JkLmNoPqRsTu"
          ],
          "title": "File Id",
          "type": "string"
        },
        "new_title": {
          "default": null,
          "description": "The title to assign to the new copy of the file. If not provided, the copied file will have the same title as the original, prefixed with 'Copy of '.",
          "examples": [
            "Copy of Quarterly Report",
            "Duplicate of Project Plan"
          ],
          "title": "New Title",
          "type": "string"
        }
      },
      "required": [
        "file_id"
      ],
      "title": "CopyFileRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLEDRIVE_CREATE_FILE_FROM_TEXT",
    "description": "Creates a new file in google drive from provided text content (up to 10mb), supporting various formats including automatic conversion to google workspace types.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "file_name": {
          "description": "Desired name for the new file on Google Drive.",
          "examples": [
            "meeting_notes.txt",
            "My New Document"
          ],
          "title": "File Name",
          "type": "string"
        },
        "mime_type": {
          "default": "text/plain",
          "description": "MIME type for the new file, determining how Google Drive interprets its content.",
          "examples": [
            "text/plain",
            "application/vnd.google-apps.document",
            "application/vnd.google-apps.spreadsheet",
            "application/vnd.google-apps.presentation"
          ],
          "title": "Mime Type",
          "type": "string"
        },
        "parent_id": {
          "default": null,
          "description": "ID of the parent folder in Google Drive; if omitted, the file is created in the root of 'My Drive'.",
          "examples": [
            "1KMXpS5g9N04W44_1T7_IDN18V8x00AKE"
          ],
          "title": "Parent Id",
          "type": "string"
        },
        "text_content": {
          "description": "Plain text content to be written into the new file.",
          "title": "Text Content",
          "type": "string"
        }
      },
      "required": [
        "file_name",
        "text_content"
      ],
      "title": "CreateFileFromTextRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLEDRIVE_CREATE_FOLDER",
    "description": "Creates a new folder in google drive, optionally within a parent folder specified by its id or name; if a parent name is provided but not found, the action will fail.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "folder_name": {
          "description": "Name for the new folder.",
          "examples": [
            "Project Files",
            "Documents",
            "Reports"
          ],
          "title": "Folder Name",
          "type": "string"
        },
        "parent_id": {
          "anyOf": [
            {
              "pattern": "^[a-zA-Z0-9_-]{28,33}$",
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "ID or name of the parent folder. If a name is provided, the action attempts to find it. If an ID is provided, it must be a valid Google Drive folder ID. If omitted, the folder is created in the Drive root.",
          "examples": [
            "0AGr3s6kL3rIuUk9PVA",
            "Existing Parent Folder Name",
            "1A2b3C4d5E6fG7h8I9j0KlMNOPqRstUVW"
          ],
          "title": "Parent Id",
          "type": "string"
        }
      },
      "required": [
        "folder_name"
      ],
      "title": "CreateFolderRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLEDRIVE_DELETE_FOLDER_OR_FILE",
    "description": "Permanently deletes a google drive file or folder by its id, bypassing the trash; the item cannot be recovered.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "file_id": {
          "description": "The unique identifier (ID) of the folder or file to be permanently deleted from Google Drive.",
          "examples": [
            "1XyZAbcDefGhiJklMnoPqRsTuVwXyZAbcDef"
          ],
          "title": "File Id",
          "type": "string"
        }
      },
      "required": [
        "file_id"
      ],
      "title": "DeleteFolderRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLEDRIVE_DOWNLOAD_FILE",
    "description": "Downloads a file from google drive by its id, optionally exporting google workspace documents (docs, sheets, slides) to a specified `mime type`; for other file types, `mime type` must be omitted.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "file_id": {
          "description": "The unique identifier of the file to be downloaded from Google Drive. This ID can typically be found in the file's URL in Google Drive or obtained from API calls that list files.",
          "examples": [
            "1aBcDeFgHiJkLmNoPqRsTuVwXyZ0123456789"
          ],
          "title": "File Id",
          "type": "string"
        },
        "mime_type": {
          "anyOf": [
            {
              "enum": [
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                "application/vnd.oasis.opendocument.text",
                "application/rtf",
                "application/pdf",
                "text/plain",
                "application/zip",
                "application/epub+zip",
                "text/markdown",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "application/x-vnd.oasis.opendocument.spreadsheet",
                "text/csv",
                "text/tab-separated-values",
                "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                "application/vnd.oasis.opendocument.presentation",
                "image/jpeg",
                "image/png",
                "image/svg+xml",
                "application/vnd.google-apps.script+json",
                "application/vnd.google-apps.vid"
              ],
              "title": "MimeType",
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Target MIME type for exporting Google Workspace documents (e.g., Google Doc, Sheet, Slide). ONLY use if the file is a native Google Workspace format; specifying it is highly recommended for successful export. MUST be omitted for non-Google Workspace files (e.g., PDFs, images), which are downloaded in their native format.",
          "examples": [
            "application/pdf",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "text/csv"
          ],
          "title": "Mime Type",
          "type": "string"
        }
      },
      "required": [
        "file_id"
      ],
      "title": "DownloadFileRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLEDRIVE_EDIT_FILE",
    "description": "Updates an existing google drive file by overwriting its entire content with new text (max 10mb).",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "content": {
          "description": "New textual content to overwrite the existing file; will be UTF-8 encoded for upload.",
          "title": "Content",
          "type": "string"
        },
        "file_id": {
          "description": "Identifier of the Google Drive file to update.",
          "title": "File Id",
          "type": "string"
        },
        "mime_type": {
          "default": "text/plain",
          "description": "MIME type of the 'content' being uploaded; must accurately represent its format.",
          "examples": [
            "text/plain",
            "text/html",
            "text/csv",
            "application/json",
            "application/xml",
            "application/javascript"
          ],
          "title": "Mime Type",
          "type": "string"
        }
      },
      "required": [
        "file_id",
        "content"
      ],
      "title": "EditFileRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLEDRIVE_FIND_FILE",
    "description": "Searches for files and folders in google drive using various criteria; `modified after` timestamp must be in utc rfc3339 format.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "folder_id": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "ID of the folder to search within. If omitted, searches the root folder ('My Drive').",
          "examples": [
            "1234567890"
          ],
          "title": "Folder Id",
          "type": "string"
        },
        "full_text_contains": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Searches file content for this text (case-insensitive).",
          "examples": [
            "Q1 results",
            "obsolete"
          ],
          "title": "Full Text Contains",
          "type": "string"
        },
        "full_text_not_contains": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Excludes files whose content contains this text (case-insensitive).",
          "examples": [
            "obsolete"
          ],
          "title": "Full Text Not Contains",
          "type": "string"
        },
        "include_items_from_all_drives": {
          "default": true,
          "description": "Set to true to search all drives, including shared drives. If true, 'supports_all_drives' must also be true.",
          "title": "Include Items From All Drives",
          "type": "boolean"
        },
        "mime_type": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Filters files by a specific MIME type (e.g., 'application/vnd.google-apps.document' for Google Docs, 'application/pdf' for PDF files).",
          "examples": [
            "application/vnd.google-apps.document",
            "application/pdf"
          ],
          "title": "Mime Type",
          "type": "string"
        },
        "modified_after": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Filters for files modified after this UTC RFC3339 timestamp (e.g., '2023-01-01T00:00:00Z').",
          "examples": [
            "2023-01-01T00:00:00Z",
            "2023-01-01T12:00:00Z"
          ],
          "title": "Modified After",
          "type": "string"
        },
        "name_contains": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Searches for files whose names contain this string (case-insensitive).",
          "examples": [
            "meeting",
            "draft",
            "Q1 results",
            "obsolete"
          ],
          "title": "Name Contains",
          "type": "string"
        },
        "name_exact": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Searches for files with an exact, case-sensitive name match.",
          "examples": [
            "Annual Report.pdf",
            "Meeting Minutes.docx",
            "Draft Report.docx"
          ],
          "title": "Name Exact",
          "type": "string"
        },
        "name_not_contains": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Excludes files whose names contain this string (case-insensitive).",
          "examples": [
            "draft",
            "obsolete"
          ],
          "title": "Name Not Contains",
          "type": "string"
        },
        "page_size": {
          "default": 5,
          "description": "The maximum number of files to return per page. Must be at least 1.",
          "examples": [
            "5",
            "10",
            "20",
            "50"
          ],
          "minimum": 1,
          "title": "Page Size",
          "type": "integer"
        },
        "page_token": {
          "default": "",
          "description": "Token for fetching a specific page of results. Obtained from 'next_page_token' in a previous response. If omitted or empty, the first page is returned.",
          "title": "Page Token",
          "type": "string"
        },
        "starred": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Filters for files that are starred (True) or not starred (False). If unspecified, starred status is not used as a filter.",
          "examples": [
            "false",
            "true"
          ],
          "title": "Starred",
          "type": "boolean"
        },
        "supports_all_drives": {
          "default": true,
          "description": "Indicates if the application supports searching 'My Drive' and shared drives. Must be true if 'include_items_from_all_drives' is true.",
          "title": "Supports All Drives",
          "type": "boolean"
        }
      },
      "title": "FindFileRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GOOGLEDRIVE_FIND_FOLDER",
    "description": "Finds folders in google drive by applying all specified search criteria using 'and' logic.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "full_text_contains": {
          "default": null,
          "description": "A string to search for within the full text content of files within folders (if applicable and supported by Drive for the folder type or its contents). This search is case-insensitive.",
          "examples": [
            "confidential project details",
            "keyword"
          ],
          "title": "Full Text Contains",
          "type": "string"
        },
        "full_text_not_contains": {
          "default": null,
          "description": "A string to exclude from the full text content of files within folders. This search is case-insensitive.",
          "examples": [
            "draft",
            "internal use only"
          ],
          "title": "Full Text Not Contains",
          "type": "string"
        },
        "modified_after": {
          "default": null,
          "description": "Search for folders modified after a specific date and time. The timestamp must be in RFC 3339 format (e.g., '2023-01-15T10:00:00Z' or '2023-01-15T10:00:00.000Z').",
          "examples": [
            "2023-08-01T00:00:00Z"
          ],
          "title": "Modified After",
          "type": "string"
        },
        "name_contains": {
          "default": null,
          "description": "A substring to search for within folder names. This search is case-insensitive.",
          "examples": [
            "report",
            "meeting notes"
          ],
          "title": "Name Contains",
          "type": "string"
        },
        "name_exact": {
          "default": null,
          "description": "The exact name of the folder to search for. This search is case-sensitive.",
          "examples": [
            "Project Alpha",
            "Q1 Financials"
          ],
          "title": "Name Exact",
          "type": "string"
        },
        "name_not_contains": {
          "default": null,
          "description": "A substring to exclude from folder names. Folders with names containing this substring will not be returned. This search is case-insensitive.",
          "examples": [
            "archive",
            "old"
          ],
          "title": "Name Not Contains",
          "type": "string"
        },
        "starred": {
          "default": null,
          "description": "Set to true to search for folders that are starred, or false for those that are not.",
          "title": "Starred",
          "type": "boolean"
        }
      },
      "title": "FindFolderRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GOOGLEDRIVE_PARSE_FILE",
    "description": "Deprecated: exports google workspace files (max 10mb) to a specified format using `mime type`, or downloads other file types; use `googledrive download file` instead.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "file_id": {
          "description": "The unique ID of the file stored in Google Drive that you want to export or download.",
          "title": "File Id",
          "type": "string"
        },
        "mime_type": {
          "anyOf": [
            {
              "enum": [
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                "application/vnd.oasis.opendocument.text",
                "application/rtf",
                "application/pdf",
                "text/plain",
                "application/zip",
                "application/epub+zip",
                "text/markdown",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "application/x-vnd.oasis.opendocument.spreadsheet",
                "text/csv",
                "text/tab-separated-values",
                "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                "application/vnd.oasis.opendocument.presentation",
                "image/jpeg",
                "image/png",
                "image/svg+xml",
                "application/vnd.google-apps.script+json",
                "application/vnd.google-apps.vid"
              ],
              "title": "MimeType",
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Target MIME type for exporting Google Workspace documents (e.g., Docs, Sheets) to a different format (e.g., PDF, DOCX). Omit for direct download of non-Workspace files or if no conversion is needed for Workspace files.",
          "examples": [
            "application/pdf",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "text/csv"
          ],
          "title": "Mime Type",
          "type": "string"
        }
      },
      "required": [
        "file_id"
      ],
      "title": "ParseFileRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLEDRIVE_UPLOAD_FILE",
    "description": "Uploads a file (max 5mb) to google drive, moving it to a specified folder if a valid folder id is provided, otherwise uploads to root.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "folder_to_upload_to": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Optional ID of the target Google Drive folder; can be obtained using 'Find Folder' or similar actions.",
          "examples": [
            "1duXYCvYC5tIp5B_B1HWLq8LyDYXfMhPU"
          ],
          "title": "Folder To Upload To",
          "type": "string"
        },
        "file_to_upload_schema_parsed_file": {
          "title": "FileUploadable",
          "type": "string",
          "description": "File to upload to Google Drive (max 5MB), identified by its name or path."
        }
      },
      "required": [
        "file_to_upload_schema_parsed_file"
      ],
      "title": "UploadFileRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLESHEETS_AGGREGATE_COLUMN_DATA",
    "description": "Searches for rows where a specific column matches a value and performs mathematical operations on data from another column.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "description": "Request to search for rows matching a column value and aggregate data from another column.",
      "properties": {
        "case_sensitive": {
          "default": true,
          "description": "Whether the search should be case-sensitive.",
          "examples": [
            true,
            false
          ],
          "title": "Case Sensitive",
          "type": "boolean"
        },
        "has_header_row": {
          "default": true,
          "description": "Whether the first row contains column headers. If True, column names can be used for search_column and target_column.",
          "examples": [
            true,
            false
          ],
          "title": "Has Header Row",
          "type": "boolean"
        },
        "operation": {
          "description": "The mathematical operation to perform on the target column values.",
          "enum": [
            "sum",
            "average",
            "count",
            "min",
            "max",
            "percentage"
          ],
          "examples": [
            "sum",
            "average",
            "count",
            "min",
            "max",
            "percentage"
          ],
          "title": "Operation",
          "type": "string"
        },
        "percentage_total": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "For percentage operation, the total value to calculate percentage against. If not provided, uses sum of all values in target column.",
          "examples": [
            10000,
            50000.5
          ],
          "title": "Percentage Total",
          "type": "number"
        },
        "search_column": {
          "description": "The column to search in. Can be a letter (e.g., 'A', 'B') or column name from header row (e.g., 'Region', 'Department').",
          "examples": [
            "A",
            "Region",
            "Department"
          ],
          "title": "Search Column",
          "type": "string"
        },
        "search_value": {
          "description": "The exact value to search for in the search column. Case-sensitive by default.",
          "examples": [
            "HSR",
            "Sales",
            "North Region"
          ],
          "title": "Search Value",
          "type": "string"
        },
        "sheet_name": {
          "description": "The name of the specific sheet within the spreadsheet.",
          "examples": [
            "Sheet1",
            "Sales Data"
          ],
          "title": "Sheet Name",
          "type": "string"
        },
        "spreadsheet_id": {
          "description": "The unique identifier of the Google Sheets spreadsheet.",
          "examples": [
            "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
          ],
          "title": "Spreadsheet Id",
          "type": "string"
        },
        "target_column": {
          "description": "The column to aggregate data from. Can be a letter (e.g., 'C', 'D') or column name from header row (e.g., 'Sales', 'Revenue').",
          "examples": [
            "D",
            "Sales",
            "Revenue"
          ],
          "title": "Target Column",
          "type": "string"
        }
      },
      "required": [
        "spreadsheet_id",
        "sheet_name",
        "search_column",
        "search_value",
        "target_column",
        "operation"
      ],
      "title": "AggregateColumnDataRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLESHEETS_BATCH_GET",
    "description": "Retrieves data from specified cell ranges in a google spreadsheet; ensure the spreadsheet has at least one worksheet and any explicitly referenced sheet names in ranges exist.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "ranges": {
          "default": null,
          "description": "A list of cell ranges in A1 notation (e.g., 'Sheet1!A1:B2', 'A1:C5') from which to retrieve data. If this list is omitted or empty, all data from the first sheet of the spreadsheet will be fetched. A range can specify a sheet name (e.g., 'Sheet2!A:A'); if no sheet name is provided in a range string (e.g., 'A1:B2'), it defaults to the first sheet.",
          "examples": [
            "Sheet1!A1:B2",
            "Sheet1!A:A",
            "Sheet1!1:2",
            "Sheet1!A5:A",
            "A1:B2"
          ],
          "items": {
            "type": "string"
          },
          "title": "Ranges",
          "type": "array"
        },
        "spreadsheet_id": {
          "description": "The unique identifier of the Google Spreadsheet from which data will be retrieved.",
          "title": "Spreadsheet Id",
          "type": "string"
        }
      },
      "required": [
        "spreadsheet_id"
      ],
      "title": "BatchGetRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLESHEETS_BATCH_UPDATE",
    "description": "Updates a specified range in a google sheet with given values, or appends them as new rows if `first cell location` is omitted; ensure the target sheet exists and the spreadsheet contains at least one worksheet.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "description": "Request to update a range of cells or append new rows in a Google Sheet with specified values.",
      "properties": {
        "first_cell_location": {
          "default": null,
          "description": "The starting cell for the update range, specified in A1 notation (e.g., 'A1', 'B2'). The update will extend from this cell to the right and down, based on the provided values. If omitted, values are appended to the sheet.",
          "examples": [
            "A1",
            "D3"
          ],
          "title": "First Cell Location",
          "type": "string"
        },
        "includeValuesInResponse": {
          "default": false,
          "description": "If set to True, the response will include the updated values from the spreadsheet.",
          "examples": [
            true,
            false
          ],
          "title": "Include Values In Response",
          "type": "boolean"
        },
        "sheet_name": {
          "description": "The name of the specific sheet within the spreadsheet to update.",
          "examples": [
            "Sheet1"
          ],
          "title": "Sheet Name",
          "type": "string"
        },
        "spreadsheet_id": {
          "description": "The unique identifier of the Google Sheets spreadsheet to be updated.",
          "examples": [
            "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
          ],
          "title": "Spreadsheet Id",
          "type": "string"
        },
        "valueInputOption": {
          "default": "USER_ENTERED",
          "description": "How input data is interpreted. 'USER_ENTERED': Values parsed as if typed by a user (e.g., strings may become numbers/dates, formulas are calculated); recommended for formulas. 'RAW': Values stored as-is without parsing (e.g., '123' stays string, '=SUM(A1:B1)' stays string).",
          "enum": [
            "RAW",
            "USER_ENTERED"
          ],
          "examples": [
            "USER_ENTERED",
            "RAW"
          ],
          "title": "Value Input Option",
          "type": "string"
        },
        "values": {
          "description": "A 2D list of strings for cell values. Each inner list represents a row. Ensure columns are properly aligned across rows.",
          "examples": [
            [
              "Item",
              "Cost",
              "Stocked",
              "Ship Date"
            ],
            [
              "Wheel",
              "20.5",
              "Yes",
              "2020-06-01"
            ],
            [
              "Screw",
              "0.5",
              "Yes",
              "2020-06-03"
            ],
            [
              "Nut",
              "0.25",
              "No",
              "2020-06-02"
            ]
          ],
          "items": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "title": "Values",
          "type": "array"
        }
      },
      "required": [
        "spreadsheet_id",
        "sheet_name",
        "values"
      ],
      "title": "BatchUpdateRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLESHEETS_CLEAR_VALUES",
    "description": "Clears cell content (preserving formatting and notes) from a specified a1 notation range in a google spreadsheet; the range must correspond to an existing sheet and cells.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "range": {
          "description": "The A1 notation of the range to clear values from (e.g., 'Sheet1!A1:B2', 'MySheet!C:C', or 'A1:D5'). If the sheet name is omitted (e.g., 'A1:B2'), the operation applies to the first visible sheet.",
          "examples": [
            "Sheet1!A1:B10",
            "Sheet2!C:D",
            "A1:Z100",
            "My Custom Sheet!B3:F10"
          ],
          "title": "Range",
          "type": "string"
        },
        "spreadsheet_id": {
          "description": "The unique identifier of the Google Spreadsheet from which to clear values. This ID can be found in the URL of the spreadsheet.",
          "examples": [
            "1qZ_g6N0g3Z0s5hJ2xQ8vP9r7T_u6X3iY2o0kE_l5N7M",
            "spreαdsheetId_from_url"
          ],
          "title": "Spreadsheet Id",
          "type": "string"
        }
      },
      "required": [
        "spreadsheet_id",
        "range"
      ],
      "title": "ClearValuesRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLESHEETS_CREATE_GOOGLE_SHEET1",
    "description": "Creates a new google spreadsheet in google drive using the provided title.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "title": {
          "description": "The title for the new Google Sheet. This will be the name of the file in Google Drive.",
          "examples": [
            "Q4 Financial Report",
            "Project Plan Ideas",
            "Meeting Notes"
          ],
          "title": "Title",
          "type": "string"
        }
      },
      "required": [
        "title"
      ],
      "title": "CreateGoogleSheetRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLESHEETS_CREATE_SPREADSHEET_COLUMN",
    "description": "Creates a new column in a google spreadsheet, requiring a valid `spreadsheet id` and an existing `sheet id`; an out-of-bounds `insert index` may append/prepend the column.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "inherit_from_before": {
          "default": false,
          "description": "If true, the new column inherits properties (e.g., formatting, width) from the column immediately to its left (the preceding column). If false (default), it inherits from the column immediately to its right (the succeeding column). This is ignored if there is no respective preceding or succeeding column.",
          "examples": [
            "True",
            "False"
          ],
          "title": "Inherit From Before",
          "type": "boolean"
        },
        "insert_index": {
          "default": 0,
          "description": "The 0-based index at which the new column will be inserted. For example, an index of 0 inserts the column before the current first column (A), and an index of 1 inserts it between the current columns A and B.",
          "examples": [
            "0",
            "1",
            "5"
          ],
          "title": "Insert Index",
          "type": "integer"
        },
        "sheet_id": {
          "description": "The numeric identifier of the specific sheet (tab) within the spreadsheet where the column will be added.",
          "examples": [
            "0",
            "123456789"
          ],
          "title": "Sheet Id",
          "type": "integer"
        },
        "spreadsheet_id": {
          "description": "The unique identifier of the Google Spreadsheet where the column will be created.",
          "examples": [
            "1qZysYd_N2cZ9gkZ8sR7M0rP8sX5vW2bA9gV3rF1cE0"
          ],
          "title": "Spreadsheet Id",
          "type": "string"
        }
      },
      "required": [
        "spreadsheet_id",
        "sheet_id"
      ],
      "title": "CreateSpreadsheetColumnRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLESHEETS_CREATE_SPREADSHEET_ROW",
    "description": "Inserts a new, empty row into a specified sheet of a google spreadsheet at a given index, optionally inheriting formatting from the row above.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "inherit_from_before": {
          "default": false,
          "description": "If True, the newly inserted row will inherit formatting and properties from the row immediately preceding its insertion point. If False, it will have default formatting.",
          "examples": [
            true,
            false
          ],
          "title": "Inherit From Before",
          "type": "boolean"
        },
        "insert_index": {
          "default": 0,
          "description": "The 0-based index at which the new row should be inserted. For example, an index of 0 inserts the row at the beginning of the sheet. If the index is greater than the current number of rows, the row is appended.",
          "examples": [
            0,
            5,
            100
          ],
          "title": "Insert Index",
          "type": "integer"
        },
        "sheet_id": {
          "description": "The numeric identifier of the sheet (tab) within the spreadsheet where the row will be inserted. This ID (gid) is found in the URL of the spreadsheet (e.g., '0' for the first sheet).",
          "examples": [
            0,
            123456789
          ],
          "title": "Sheet Id",
          "type": "integer"
        },
        "spreadsheet_id": {
          "description": "The unique identifier of the Google Spreadsheet. This ID is found in the URL of the spreadsheet (e.g., '1qpyC0XzHc_-_d824s2VfopkHh7D0jW4aXCS1D_AlGA').",
          "examples": [
            "1qpyC0XzHc_-_d824s2VfopkHh7D0jW4aXCS1D_AlGA"
          ],
          "title": "Spreadsheet Id",
          "type": "string"
        }
      },
      "required": [
        "spreadsheet_id",
        "sheet_id"
      ],
      "title": "CreateSpreadsheetRowRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLESHEETS_FIND_WORKSHEET_BY_TITLE",
    "description": "Finds a worksheet by its exact, case-sensitive title within a google spreadsheet; returns a boolean indicating if found and the complete metadata of the entire spreadsheet, regardless of whether the target worksheet is found.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "spreadsheet_id": {
          "description": "The unique identifier of the Google Spreadsheet. This ID is part of the spreadsheet's URL.",
          "examples": [
            "1aBcDeFgHiJkLmNoPqRsTuVwXyZ0123456789_drivE",
            "your_actual_spreadsheet_id"
          ],
          "title": "Spreadsheet Id",
          "type": "string"
        },
        "title": {
          "description": "The exact, case-sensitive title of the worksheet (tab name) to find.",
          "examples": [
            "Sheet1",
            "Q3 Report",
            "Customer Data"
          ],
          "title": "Title",
          "type": "string"
        }
      },
      "required": [
        "spreadsheet_id",
        "title"
      ],
      "title": "FindWorksheetByTitleRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLESHEETS_FORMAT_CELL",
    "description": "Applies text and background cell formatting to a specified range in a google sheets worksheet.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "description": "Parameters for applying formatting to a cell range in a Google Sheet.",
      "properties": {
        "blue": {
          "default": 0.9,
          "description": "Blue component of the background color (0.0-1.0).",
          "examples": [
            "0.0",
            "0.5",
            "1.0"
          ],
          "title": "Blue",
          "type": "number"
        },
        "bold": {
          "default": false,
          "description": "Apply bold formatting.",
          "examples": [
            "true",
            "false"
          ],
          "title": "Bold",
          "type": "boolean"
        },
        "end_column_index": {
          "description": "0-based index of the column *after* the last column in the range (exclusive); must be greater than `start_column_index`.",
          "examples": [
            "2",
            "5"
          ],
          "title": "End Column Index",
          "type": "integer"
        },
        "end_row_index": {
          "description": "0-based index of the row *after* the last row in the range (exclusive); must be greater than `start_row_index`.",
          "examples": [
            "1",
            "10"
          ],
          "title": "End Row Index",
          "type": "integer"
        },
        "fontSize": {
          "default": 10,
          "description": "Font size in points.",
          "examples": [
            "10",
            "12",
            "14"
          ],
          "title": "Font Size",
          "type": "integer"
        },
        "green": {
          "default": 0.9,
          "description": "Green component of the background color (0.0-1.0).",
          "examples": [
            "0.0",
            "0.5",
            "1.0"
          ],
          "title": "Green",
          "type": "number"
        },
        "italic": {
          "default": false,
          "description": "Apply italic formatting.",
          "examples": [
            "true",
            "false"
          ],
          "title": "Italic",
          "type": "boolean"
        },
        "red": {
          "default": 0.9,
          "description": "Red component of the background color (0.0-1.0).",
          "examples": [
            "0.0",
            "0.5",
            "1.0"
          ],
          "title": "Red",
          "type": "number"
        },
        "spreadsheet_id": {
          "description": "Identifier of the Google Sheets spreadsheet.",
          "examples": [
            "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms"
          ],
          "title": "Spreadsheet Id",
          "type": "string"
        },
        "start_column_index": {
          "description": "0-based index of the first column in the range.",
          "examples": [
            "0",
            "1"
          ],
          "title": "Start Column Index",
          "type": "integer"
        },
        "start_row_index": {
          "description": "0-based index of the first row in the range.",
          "examples": [
            "0",
            "5"
          ],
          "title": "Start Row Index",
          "type": "integer"
        },
        "strikethrough": {
          "default": false,
          "description": "Apply strikethrough formatting.",
          "examples": [
            "true",
            "false"
          ],
          "title": "Strikethrough",
          "type": "boolean"
        },
        "underline": {
          "default": false,
          "description": "Apply underline formatting.",
          "examples": [
            "true",
            "false"
          ],
          "title": "Underline",
          "type": "boolean"
        },
        "worksheet_id": {
          "description": "Numerical ID (sheetId) of the worksheet; typically 0 for the first sheet. Use `GOOGLESHEETS_GET_SPREADSHEET_INFO` to find this ID.",
          "examples": [
            "0",
            "123456789"
          ],
          "title": "Worksheet Id",
          "type": "integer"
        }
      },
      "required": [
        "spreadsheet_id",
        "worksheet_id",
        "start_row_index",
        "start_column_index",
        "end_row_index",
        "end_column_index"
      ],
      "title": "FormatCellRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLESHEETS_GET_SHEET_NAMES",
    "description": "Lists all worksheet names from a specified google spreadsheet (which must exist), useful for discovering sheets before further operations.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "spreadsheet_id": {
          "description": "The unique identifier of the Google Spreadsheet. This ID is typically found in the spreadsheet's URL.",
          "examples": [
            "1qpyC0XzvTcKT6EISywY_7H7D7No1tpxEXAMPLE_ID"
          ],
          "title": "Spreadsheet Id",
          "type": "string"
        }
      },
      "required": [
        "spreadsheet_id"
      ],
      "title": "GetSheetNamesRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLESHEETS_GET_SPREADSHEET_INFO",
    "description": "Retrieves comprehensive metadata for a google spreadsheet using its id, excluding cell data.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "spreadsheet_id": {
          "description": "Unique identifier of the Google Spreadsheet, typically found in its URL.",
          "examples": [
            "12345abcdefGHIJKLMNOPqrstuvwxyz67890UVWXYZ"
          ],
          "title": "Spreadsheet Id",
          "type": "string"
        }
      },
      "required": [
        "spreadsheet_id"
      ],
      "title": "GetSpreadsheetInfoRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLESHEETS_LOOKUP_SPREADSHEET_ROW",
    "description": "Finds the first row in a google spreadsheet where a cell's entire content exactly matches the query string, searching within a specified a1 notation range or the first sheet by default.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "case_sensitive": {
          "default": false,
          "description": "If `True`, the query string search is case-sensitive.",
          "title": "Case Sensitive",
          "type": "boolean"
        },
        "query": {
          "description": "Exact text value to find; matches the entire content of a cell in a row.",
          "examples": [
            "John",
            "Completed",
            "ID-12345"
          ],
          "title": "Query",
          "type": "string"
        },
        "range": {
          "default": null,
          "description": "A1 notation of the range to search (e.g., 'Sheet1!A1:D5', 'MySheet!A:Z', or 'Sheet1'). Defaults to the non-empty part of the first sheet. For multiple sheets, include sheet name (e.g., 'SheetName!A1:Z100').",
          "examples": [
            "Sheet1!A1:D5",
            "Sheet1!A:Z",
            "Sheet1",
            "MySheetName!C1:G10"
          ],
          "title": "Range",
          "type": "string"
        },
        "spreadsheet_id": {
          "description": "Identifier of the Google Spreadsheet to search.",
          "examples": [
            "1BiexwqQYjfC_BXy6zDQYJqb6zxzRyP9"
          ],
          "title": "Spreadsheet Id",
          "type": "string"
        }
      },
      "required": [
        "spreadsheet_id",
        "query"
      ],
      "title": "LookupSpreadsheetRowRequest",
      "type": "object"
    }
  },
  {
    "name": "GOOGLESHEETS_SEARCH_SPREADSHEETS",
    "description": "Search for google spreadsheets using various filters including name, content, date ranges, and more.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "created_after": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Return spreadsheets created after this date. Use RFC 3339 format like '2024-01-01T00:00:00Z'.",
          "examples": [
            "2024-01-01T00:00:00Z",
            "2024-12-01T12:00:00-08:00"
          ],
          "title": "Created After",
          "type": "string"
        },
        "include_trashed": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": false,
          "description": "Whether to include spreadsheets in trash. Defaults to False.",
          "title": "Include Trashed",
          "type": "boolean"
        },
        "max_results": {
          "anyOf": [
            {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": 10,
          "description": "Maximum number of spreadsheets to return (1-1000). Defaults to 10.",
          "title": "Max Results",
          "type": "integer"
        },
        "modified_after": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Return spreadsheets modified after this date. Use RFC 3339 format like '2024-01-01T00:00:00Z'.",
          "examples": [
            "2024-01-01T00:00:00Z",
            "2024-12-01T12:00:00-08:00"
          ],
          "title": "Modified After",
          "type": "string"
        },
        "order_by": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": "modifiedTime desc",
          "description": "Order results by field. Common options: 'modifiedTime desc', 'modifiedTime asc', 'name', 'createdTime desc'",
          "examples": [
            "modifiedTime desc",
            "name",
            "createdTime desc",
            "viewedByMeTime desc"
          ],
          "title": "Order By",
          "type": "string"
        },
        "query": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Search query to filter spreadsheets. Can search by name (name contains 'budget'), full text content (fullText contains 'sales'), or use complex queries with operators like 'and', 'or', 'not'. Leave empty to get all spreadsheets.",
          "examples": [
            "name contains 'budget'",
            "fullText contains 'sales'",
            "name contains 'report' and fullText contains 'quarterly'"
          ],
          "title": "Query",
          "type": "string"
        },
        "shared_with_me": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": false,
          "description": "Whether to return only spreadsheets shared with the current user. Defaults to False.",
          "title": "Shared With Me",
          "type": "boolean"
        },
        "starred_only": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "default": false,
          "description": "Whether to return only starred spreadsheets. Defaults to False.",
          "title": "Starred Only",
          "type": "boolean"
        }
      },
      "title": "SearchSpreadsheetsRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "GOOGLESHEETS_SHEET_FROM_JSON",
    "description": "Creates a new google spreadsheet and populates its first worksheet from `sheet json`, which must be non-empty as its first item's keys establish the headers.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "sheet_json": {
          "description": "A list of dictionaries representing the rows of the sheet. Each dictionary must have the same set of keys, which will form the header row. Values can be strings, numbers, booleans, or null (represented as empty cells).",
          "examples": [
            "[{\"Name\": \"Alice\", \"Age\": 30, \"City\": \"New York\"}, {\"Name\": \"Bob\", \"Age\": 24, \"City\": \"London\"}]",
            "[{\"Product ID\": \"A123\", \"Quantity\": 10, \"Price\": 25.50}, {\"Product ID\": \"B456\", \"Quantity\": 5, \"Price\": 100.00}]"
          ],
          "items": {
            "type": "object"
          },
          "title": "Sheet Json",
          "type": "array"
        },
        "sheet_name": {
          "description": "The name for the first worksheet within the newly created spreadsheet. This name will appear as a tab at the bottom of the sheet.",
          "examples": [
            "Sheet1",
            "Data Summary",
            "October Metrics"
          ],
          "title": "Sheet Name",
          "type": "string"
        },
        "title": {
          "description": "The desired title for the new Google Spreadsheet.",
          "examples": [
            "Q3 Sales Report",
            "Project Plan Alpha"
          ],
          "title": "Title",
          "type": "string"
        }
      },
      "required": [
        "title",
        "sheet_name",
        "sheet_json"
      ],
      "title": "SheetFromJsonRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_ADD_PAGE_CONTENT",
    "description": "Appends a single content block to a notion page or a parent block (must be page, toggle, to-do, bulleted/numbered list, callout, or quote); invoke repeatedly to add multiple blocks.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "after": {
          "default": null,
          "description": "Identifier of an existing block. The new content block will be appended immediately after this block. If omitted or null, the new block is appended to the end of the parent's children list.",
          "examples": [
            "4b5f6e87-123a-456b-789c-9de8f7a9e4c0"
          ],
          "title": "After",
          "type": "string"
        },
        "content_block": {
          "description": "A NotionRichText object defining the content and type of the new block to be added (e.g., paragraph, heading, to_do). This structure must conform to Notion's block object schema for child content. Refer to Notion API documentation for specific block type structures.",
          "examples": [
            "{'type': 'paragraph', 'paragraph': {'rich_text': [{'type': 'text', 'text': {'content': 'This is a new paragraph added via API.'}}]}}"
          ],
          "properties": {
            "block_property": {
              "default": "paragraph",
              "description": "The block property of the block to be added. Possible property are `paragraph`,`heading_1`,`heading_2`,`heading_3`,`callout`,`todo`,`toggle`,`quote`, `bulleted_list_item`, `numbered_list_item`, other properties possible are `file`,`image`,`video` (link required).",
              "enum": [
                "paragraph",
                "heading_1",
                "heading_2",
                "heading_3",
                "callout",
                "todo",
                "toggle",
                "quote",
                "bulleted_list_item",
                "numbered_list_item",
                "file",
                "image",
                "video"
              ],
              "examples": [
                "paragraph",
                "heading_1",
                "heading_2",
                "heading_3",
                "bulleted_list_item",
                "numbered_list_item"
              ],
              "title": "Block Property",
              "type": "string"
            },
            "bold": {
              "default": false,
              "description": "Indicates if the text is bold.",
              "examples": [
                true,
                false
              ],
              "title": "Bold",
              "type": "boolean"
            },
            "code": {
              "default": false,
              "description": "Indicates if the text is formatted as code.",
              "examples": [
                true,
                false
              ],
              "title": "Code",
              "type": "boolean"
            },
            "color": {
              "default": "default",
              "description": "The color of the text background or text itself.",
              "examples": [
                "blue_background",
                "yellow_background",
                "gray",
                "purple"
              ],
              "title": "Color",
              "type": "string"
            },
            "content": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "The textual content of the rich text object. Required for paragraph, heading_1, heading_2, heading_3, callout, todo, toggle, quote.",
              "examples": [
                "Hello World",
                "This is a heading",
                "This is a paragraph"
              ],
              "title": "Content"
            },
            "italic": {
              "default": false,
              "description": "Indicates if the text is italic.",
              "examples": [
                true,
                false
              ],
              "title": "Italic",
              "type": "boolean"
            },
            "link": {
              "default": null,
              "description": "The URL of the rich text object or the file to be uploaded or image/video link",
              "examples": [
                "https://www.google.com"
              ],
              "title": "Link",
              "type": "string"
            },
            "strikethrough": {
              "default": false,
              "description": "Indicates if the text has strikethrough.",
              "examples": [
                true,
                false
              ],
              "title": "Strikethrough",
              "type": "boolean"
            },
            "underline": {
              "default": false,
              "description": "Indicates if the text is underlined.",
              "examples": [
                true,
                false
              ],
              "title": "Underline",
              "type": "boolean"
            }
          },
          "title": "Content Block",
          "type": "object"
        },
        "parent_block_id": {
          "description": "Identifier of the parent page or block to which the new content block will be added. This parent must be capable of having child blocks. Obtain valid IDs using other Notion actions or API calls.",
          "examples": [
            "4b5f6e87-123a-456b-789c-9de8f7a9e4c1"
          ],
          "title": "Parent Block Id",
          "type": "string"
        }
      },
      "required": [
        "parent_block_id",
        "content_block"
      ],
      "title": "AddPageContentRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_APPEND_BLOCK_CHILDREN",
    "description": "Appends new child blocks to a specified parent block or page in notion, ideal for adding content within an existing structure (e.g., list items, toggle content) rather than creating new pages; the parent must be able to accept children.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "description": "Request model for appending child blocks to an existing block.",
      "properties": {
        "after": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "An optional ID of an existing child block. If provided, the new blocks will be inserted directly after this specified block. If omitted, new blocks are appended to the end of the parent's children list.",
          "examples": [
            "9bc30ad4-9373-46a5-84ab-0a7845ee52e6"
          ],
          "title": "After",
          "type": "string"
        },
        "block_id": {
          "description": "Identifier of the parent block or page to which new child blocks will be appended. To find available page IDs and their titles, the `NOTION_FETCH_DATA` action can be utilized.",
          "examples": [
            "b55c9c91-384d-452b-81db-d1ef79372b75"
          ],
          "title": "Block Id",
          "type": "string"
        },
        "children": {
          "description": "A list of block objects to be added as children to the parent block. Each block object must conform to Notion's block structure. A maximum of 100 blocks can be appended in a single request.",
          "examples": [
            "[{\"object\": \"block\", \"type\": \"heading_2\", \"heading_2\": {\"rich_text\": [{\"text\": {\"content\": \"Lacinato kale\"}}]}}]"
          ],
          "items": {
            "type": "object"
          },
          "title": "Children",
          "type": "array"
        }
      },
      "required": [
        "block_id",
        "children"
      ],
      "title": "AppendBlockChildrenRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_ARCHIVE_NOTION_PAGE",
    "description": "Archives (moves to trash) or unarchives (restores from trash) a specified notion page.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "archive": {
          "default": true,
          "description": "Set to `true` to move the page to trash (archive), or `false` to restore it from trash (unarchive). Defaults to `true`.",
          "title": "Archive",
          "type": "boolean"
        },
        "page_id": {
          "description": "The unique identifier (UUID) of the Notion page to be archived or unarchived. This page must already exist in the Notion workspace. Page IDs can be obtained using other Notion actions that retrieve or search for pages.",
          "examples": [
            "a1b2c3d4-e5f6-7890-1234-567890abcdef"
          ],
          "title": "Page Id",
          "type": "string"
        }
      },
      "required": [
        "page_id"
      ],
      "title": "ArchiveNotionPageRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_CREATE_COMMENT",
    "description": "Adds a comment to a notion page (via `parent page id`) or to an existing discussion thread (via `discussion id`); cannot create new discussion threads on specific blocks (inline comments).",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "comment": {
          "description": "A NotionRichText object that defines the comment's content. This object must conform to the Notion API's rich text structure. For a simple text comment, use a structure like `{'type': 'text', 'text': {'content': 'your text here'}}`.",
          "examples": [
            "{\"type\": \"text\", \"text\": {\"content\": \"This is an insightful remark.\"}}"
          ],
          "properties": {
            "block_property": {
              "default": "paragraph",
              "description": "The block property of the block to be added. Possible property are `paragraph`,`heading_1`,`heading_2`,`heading_3`,`callout`,`todo`,`toggle`,`quote`, `bulleted_list_item`, `numbered_list_item`, other properties possible are `file`,`image`,`video` (link required).",
              "enum": [
                "paragraph",
                "heading_1",
                "heading_2",
                "heading_3",
                "callout",
                "todo",
                "toggle",
                "quote",
                "bulleted_list_item",
                "numbered_list_item",
                "file",
                "image",
                "video"
              ],
              "examples": [
                "paragraph",
                "heading_1",
                "heading_2",
                "heading_3",
                "bulleted_list_item",
                "numbered_list_item"
              ],
              "title": "Block Property",
              "type": "string"
            },
            "bold": {
              "default": false,
              "description": "Indicates if the text is bold.",
              "examples": [
                true,
                false
              ],
              "title": "Bold",
              "type": "boolean"
            },
            "code": {
              "default": false,
              "description": "Indicates if the text is formatted as code.",
              "examples": [
                true,
                false
              ],
              "title": "Code",
              "type": "boolean"
            },
            "color": {
              "default": "default",
              "description": "The color of the text background or text itself.",
              "examples": [
                "blue_background",
                "yellow_background",
                "gray",
                "purple"
              ],
              "title": "Color",
              "type": "string"
            },
            "content": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "The textual content of the rich text object. Required for paragraph, heading_1, heading_2, heading_3, callout, todo, toggle, quote.",
              "examples": [
                "Hello World",
                "This is a heading",
                "This is a paragraph"
              ],
              "title": "Content"
            },
            "italic": {
              "default": false,
              "description": "Indicates if the text is italic.",
              "examples": [
                true,
                false
              ],
              "title": "Italic",
              "type": "boolean"
            },
            "link": {
              "default": null,
              "description": "The URL of the rich text object or the file to be uploaded or image/video link",
              "examples": [
                "https://www.google.com"
              ],
              "title": "Link",
              "type": "string"
            },
            "strikethrough": {
              "default": false,
              "description": "Indicates if the text has strikethrough.",
              "examples": [
                true,
                false
              ],
              "title": "Strikethrough",
              "type": "boolean"
            },
            "underline": {
              "default": false,
              "description": "Indicates if the text is underlined.",
              "examples": [
                true,
                false
              ],
              "title": "Underline",
              "type": "boolean"
            }
          },
          "title": "Comment",
          "type": "object"
        },
        "discussion_id": {
          "default": null,
          "description": "The ID of an existing discussion thread to which the comment will be added. This is required if `parent_page_id` is not provided.",
          "examples": [
            "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy"
          ],
          "title": "Discussion Id",
          "type": "string"
        },
        "parent_page_id": {
          "default": null,
          "description": "The ID of the Notion page where the comment will be added. This is required if `discussion_id` is not provided. Page IDs can be obtained using other Notion actions that fetch page details or list pages.",
          "examples": [
            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          ],
          "title": "Parent Page Id",
          "type": "string"
        }
      },
      "required": [
        "comment"
      ],
      "title": "CreateCommentRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_CREATE_DATABASE",
    "description": "Creates a new notion database as a subpage under a specified parent page with a defined properties schema; use this action exclusively for creating new databases.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "parent_id": {
          "description": "Identifier of the existing Notion page that will contain the new database. This ID must be a valid UUID corresponding to a page within the Notion workspace. It can often be obtained using search functionalities or the `NOTION_FETCH_DATA` action.",
          "examples": [
            "a1b2c3d4-e5f6-7890-1234-567890abcdef"
          ],
          "title": "Parent Id",
          "type": "string"
        },
        "properties": {
          "description": "A list defining the schema (columns) for the new database. Each item in the list is an object representing a property and must specify at least its 'name' (how it will appear in Notion) and 'type' (the kind of data it will hold). Refer to the `PropertySchema` model for full structure details. At least one property of type 'title' is generally required. Common supported property types include: 'title', 'rich_text', 'number', 'select', 'multi_select', 'status', 'date', 'people', 'files', 'checkbox', 'url', 'email', 'phone_number'. Other types like 'formula', 'relation', 'rollup', 'created_time', 'created_by', 'last_edited_time', 'last_edited_by' might also be supported.",
          "examples": [
            "[{\"name\": \"Task Name\", \"type\": \"title\"}, {\"name\": \"Due Date\", \"type\": \"date\"}]",
            "[{\"name\": \"Feature\", \"type\": \"title\"}, {\"name\": \"Status\", \"type\": \"select\"}, {\"name\": \"Assignee\", \"type\": \"people\"}, {\"name\": \"Details\", \"type\": \"rich_text\"}]"
          ],
          "items": {
            "properties": {
              "name": {
                "description": "Name of the property",
                "title": "Name",
                "type": "string"
              },
              "type": {
                "description": "The type of the property, which determines the kind of data it will store. Valid types are defined by the PropertyType enum.",
                "enum": [
                  "title",
                  "rich_text",
                  "number",
                  "select",
                  "multi_select",
                  "date",
                  "people",
                  "files",
                  "checkbox",
                  "url",
                  "email",
                  "phone_number",
                  "formula",
                  "relation",
                  "rollup",
                  "created_time",
                  "created_by",
                  "last_edited_time",
                  "last_edited_by"
                ],
                "title": "PropertyType",
                "type": "string"
              }
            },
            "required": [
              "name",
              "type"
            ],
            "title": "PropertySchema",
            "type": "object"
          },
          "title": "Properties",
          "type": "array"
        },
        "title": {
          "description": "The desired title for the new database. This text will be automatically converted into Notion's rich text format when the database is created.",
          "examples": [
            "Project Roadmap",
            "Q3 Content Calendar"
          ],
          "title": "Title",
          "type": "string"
        }
      },
      "required": [
        "parent_id",
        "title",
        "properties"
      ],
      "title": "CreateDatabaseRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_CREATE_NOTION_PAGE",
    "description": "Creates a new page in a notion workspace.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "cover": {
          "default": null,
          "description": "The URL of an image to be used as the cover for the new page. The URL must be publicly accessible.",
          "examples": [
            "https://www.example.com/images/cover.png"
          ],
          "pattern": "^https?://.+",
          "title": "Cover",
          "type": "string"
        },
        "icon": {
          "default": null,
          "description": "An emoji to be used as the icon for the new page. Must be a single emoji character.",
          "examples": [
            "😻",
            "🤔",
            "📄"
          ],
          "pattern": "[\\U0001F300-\\U0001F9FF]|[\\u2600-\\u26FF\\u2700-\\u27BF]",
          "title": "Icon",
          "type": "string"
        },
        "parent_id": {
          "description": "The UUID of the parent page or database under which the new page will be created. This ID must correspond to an existing page or database in the Notion workspace. Use other Notion actions (e.g., for searching or fetching data) to obtain valid parent IDs.",
          "examples": [
            "59833787-2cf9-4fdf-8782-e53db20768a5"
          ],
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "title": "Parent Id",
          "type": "string"
        },
        "title": {
          "description": "The title of the new page to be created.",
          "examples": [
            "My new report",
            "Project Plan Q3"
          ],
          "title": "Title",
          "type": "string"
        }
      },
      "required": [
        "parent_id",
        "title"
      ],
      "title": "CreateNotionPageRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_DELETE_BLOCK",
    "description": "Archives a notion block, page, or database using its id, which sets its 'archived' property to true (like moving to \"trash\" in the ui) and allows it to be restored later.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "block_id": {
          "description": "Identifier of the block, page, or database to be deleted (archived). To find page IDs and their titles, consider using an action like `NOTION_FETCH_DATA`.",
          "examples": [
            "59833787-2cf9-4fdf-8782-e53db20768a5"
          ],
          "title": "Block Id",
          "type": "string"
        }
      },
      "required": [
        "block_id"
      ],
      "title": "DeleteBlockRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_DUPLICATE_PAGE",
    "description": "Duplicates a notion page, including all its content, properties, and nested blocks, under a specified parent page or workspace.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "description": "Defines the parameters for duplicating a Notion page.",
      "properties": {
        "page_id": {
          "description": "The unique identifier (UUID v4) of the Notion page to be duplicated. Ensure this page exists and is accessible.",
          "examples": [
            "2e22de6b-770e-4166-be30-1490f6ffd7c1"
          ],
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "title": "Page Id",
          "type": "string"
        },
        "parent_id": {
          "description": "The unique identifier (UUID v4) of the Notion page or workspace that will serve as the parent for the duplicated page. Ensure this parent exists and is accessible. This ID cannot be the same as `page_id`.",
          "examples": [
            "7e22de6b-770e-4166-be30-1490f6ffd7c1"
          ],
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "title": "Parent Id",
          "type": "string"
        },
        "title": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "An optional new title for the duplicated page. If not provided, the title of the original page will be used, prefixed with 'Copy of'.",
          "examples": [
            "My Duplicated Page",
            "Project Plan - Q3 Copy"
          ],
          "title": "Title",
          "type": "string"
        }
      },
      "required": [
        "page_id",
        "parent_id"
      ],
      "title": "DuplicatePageRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_FETCH_COMMENTS",
    "description": "Fetches unresolved comments for a specified notion block or page id.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "block_id": {
          "description": "Identifier for a Notion block or page from which to fetch comments. To find page IDs, use the `NOTION_FETCH_DATA` action to list available pages and their corresponding IDs.",
          "examples": [
            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          ],
          "title": "Block Id",
          "type": "string"
        },
        "page_size": {
          "default": 100,
          "description": "The number of comments to return in a single response page. Must be between 1 and 100, inclusive. Default is 100.",
          "maximum": 100,
          "minimum": 1,
          "title": "Page Size",
          "type": "integer"
        },
        "start_cursor": {
          "default": null,
          "description": "A pagination cursor. If provided, the response will contain the page of results starting after this cursor. If omitted, the first page of results is returned.",
          "title": "Start Cursor",
          "type": "string"
        }
      },
      "required": [
        "block_id"
      ],
      "title": "FetchCommentsRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_FETCH_DATA",
    "description": "Simplifies the retrieval of notion items by abstracting the native notion api's complexity.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "description": "Defines the parameters for fetching data (pages and/or databases) from Notion.\nExactly one of `get_pages`, `get_databases`, or `get_all` must be set to true to specify the type of data to retrieve.",
      "properties": {
        "get_all": {
          "default": false,
          "description": "If true, fetches both pages and databases accessible to the Notion integration. Only one of `get_pages`, `get_databases`, or `get_all` can be true.",
          "title": "Get All",
          "type": "boolean"
        },
        "get_databases": {
          "default": false,
          "description": "If true, fetches all databases accessible to the Notion integration. Only one of `get_pages`, `get_databases`, or `get_all` can be true.",
          "title": "Get Databases",
          "type": "boolean"
        },
        "get_pages": {
          "default": false,
          "description": "If true, fetches all pages accessible to the Notion integration. Only one of `get_pages`, `get_databases`, or `get_all` can be true.",
          "title": "Get Pages",
          "type": "boolean"
        },
        "page_size": {
          "anyOf": [
            {
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": 100,
          "description": "The maximum number of items to retrieve. Must be between 1 and 100, inclusive. Defaults to 100. Note: this action currently only fetches the first page of results, so `page_size` effectively sets the maximum number of items returned.",
          "title": "Page Size",
          "type": "integer"
        },
        "query": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "An optional search query to filter pages and/or databases by their title or content. If not provided (None or empty string), all accessible items matching the selected type (pages, databases, or both) are returned.",
          "examples": [
            "Quarterly Report",
            "User Research Notes"
          ],
          "title": "Query",
          "type": "string"
        }
      },
      "title": "FetchDataRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "NOTION_FETCH_DATABASE",
    "description": "Fetches a notion database's structural metadata (properties, title, etc.) via its `database id`, not the data entries; `database id` must reference an existing database.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "database_id": {
          "description": "The unique identifier of the Notion database whose metadata (structure, properties) is to be retrieved. To obtain a list of `database_id` values and corresponding database titles, use the 'NOTION_FETCH_DATA' action (or a similar action designed for listing/discovering databases).",
          "examples": [
            "04dc3f00-2fdd-4d83-99d1-4f9a1c43ce6f"
          ],
          "title": "Database Id",
          "type": "string"
        }
      },
      "required": [
        "database_id"
      ],
      "title": "FetchDatabaseRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_FETCH_NOTION_BLOCK",
    "description": "Retrieves a notion block (or page, as pages are blocks) using its valid uuid; if the block has children, use a separate action to fetch them.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "block_id": {
          "description": "The unique UUID identifier for the Notion block to be retrieved. This can be the ID of a standard block or a page. To find block or page IDs, you might use actions that list page content or search for blocks/pages.",
          "examples": [
            "c02fc1d3-db8b-45c5-a222-27595b15aea7"
          ],
          "format": "uuid",
          "title": "Block Id",
          "type": "string"
        }
      },
      "required": [
        "block_id"
      ],
      "title": "FetchNotionBlockRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_FETCH_NOTION_CHILD_BLOCK",
    "description": "Retrieves a paginated list of direct, first-level child block objects for a given parent notion block or page id; use block ids from the response for subsequent calls to access deeply nested content.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "block_id": {
          "description": "Identifier (UUID) of the parent Notion block or page whose children are to be fetched. This ID can be for a block or a page (as pages are blocks). To obtain relevant IDs and their titles, consider using actions like 'NOTION_FETCH_DATA' or other actions that list pages or database content.",
          "examples": [
            "c02fc1d3-db8b-45c5-a222-27595b15aea7"
          ],
          "format": "uuid",
          "title": "Block Id",
          "type": "string"
        },
        "page_size": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The maximum number of child blocks to return in a single response. The actual number of results may be lower if there are fewer child blocks available or if the end of the list is reached. Maximum allowed value is 100. If unspecified, Notion's default page size will be used.",
          "examples": [
            "25",
            "50",
            "100"
          ],
          "title": "Page Size",
          "type": "integer"
        },
        "start_cursor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "An opaque string. If provided, the response will list blocks starting from the position indicated by this cursor. If omitted, the first page of results is returned. Essential for paginating through a large number of child blocks.",
          "examples": [
            "some_opaque_cursor_string_abc_123"
          ],
          "title": "Start Cursor",
          "type": "string"
        }
      },
      "required": [
        "block_id"
      ],
      "title": "FetchNotionBlockChildRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_FETCH_ROW",
    "description": "Retrieves a notion database row's properties and metadata; use a different action for page content blocks.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "page_id": {
          "description": "The UUID of the Notion page (which represents a row in a database) to retrieve. Each row in a Notion database is a page. You can obtain `page_id` values by using an action that lists database pages (e.g., `NOTION_FETCH_DATA`) to get available page IDs and their titles.",
          "examples": [
            "6c6a9b6c-12a4-4c3e-98e2-3c7a1e4f2d2a"
          ],
          "title": "Page Id",
          "type": "string"
        }
      },
      "required": [
        "page_id"
      ],
      "title": "FetchRowRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_GET_ABOUT_ME",
    "description": "Retrieves the user object for the bot associated with the current notion integration token, typically to obtain the bot's user id for other api operations.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {},
      "title": "GetAboutMeRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "NOTION_GET_ABOUT_USER",
    "description": "Retrieves detailed information about a specific notion user, such as their name, avatar, and email, based on their unique user id.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "user_id": {
          "description": "The unique identifier of the Notion user whose details are to be retrieved. This ID is used to fetch specific user information.",
          "examples": [
            "d40e73cb-a769-4109-b8ad-14f9f4db1219"
          ],
          "title": "User Id",
          "type": "string"
        }
      },
      "required": [
        "user_id"
      ],
      "title": "GetAboutUserRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_GET_PAGE_PROPERTY_ACTION",
    "description": "Call this to get a specific property from a notion page when you have a valid `page id` and `property id`; handles pagination for properties returning multiple items.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "description": "Request model for retrieving a specific property from a Notion page.",
      "properties": {
        "page_id": {
          "description": "Identifier of the Notion page (e.g., '067dd719-a912-471e-a9a3-ac10710e78b4') from which to retrieve the property. Use the 'NOTION_FETCH_DATA' action or similar to discover available page IDs and their titles.",
          "examples": [
            "067dd719-a912-471e-a9a3-ac10710e78b4",
            "c4f15f71-7a21-4c8e-87e5-93b9e3c7e247"
          ],
          "pattern": "^[a-zA-Z0-9-]+$",
          "title": "Page Id",
          "type": "string"
        },
        "page_size": {
          "anyOf": [
            {
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "For paginated property types (e.g., 'relation', 'rollup', 'rich_text' if content is extensive), this specifies the number of items to return per request. If omitted, Notion's default page size for the property is used.",
          "title": "Page Size",
          "type": "integer"
        },
        "property_id": {
          "description": "Identifier or name of the property to retrieve. For 'title' properties, the ID is always 'title'. For other properties, this can be the property's name as displayed in Notion (e.g., 'Status', 'Assignee') or its unique programmatic ID (e.g., 'N%3A%5B%7C', 'prop_id_example'). Property IDs/names can be found by inspecting the page object or database schema.",
          "examples": [
            "title",
            "Status",
            "Due Date",
            "assignee_prop_id",
            "N%3A%5B%7C"
          ],
          "title": "Property Id",
          "type": "string"
        },
        "start_cursor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "For paginated properties, if a previous request's response indicated `has_more: true`, provide the `next_cursor` value here to fetch the subsequent set of items. Omit if fetching the first page.",
          "title": "Start Cursor",
          "type": "string"
        }
      },
      "required": [
        "page_id",
        "property_id"
      ],
      "title": "GetPagePropertyRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_INSERT_ROW_DATABASE",
    "description": "Creates a new page (row) in a specified notion database.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "child_blocks": {
          "default": [],
          "description": "A list of `NotionRichText` objects defining content blocks (e.g., paragraphs, headings) to append to the new page's body. If omitted, the page body will be empty.",
          "items": {
            "description": "Include these fields in the json: {'content': 'Some words', 'link': 'https://random-link.com'. For content styling, refer to https://developers.notion.com/reference/rich-text.",
            "properties": {
              "block_property": {
                "default": "paragraph",
                "description": "The block property of the block to be added. Possible property are `paragraph`,`heading_1`,`heading_2`,`heading_3`,`callout`,`todo`,`toggle`,`quote`, `bulleted_list_item`, `numbered_list_item`, other properties possible are `file`,`image`,`video` (link required).",
                "enum": [
                  "paragraph",
                  "heading_1",
                  "heading_2",
                  "heading_3",
                  "callout",
                  "todo",
                  "toggle",
                  "quote",
                  "bulleted_list_item",
                  "numbered_list_item",
                  "file",
                  "image",
                  "video"
                ],
                "examples": [
                  "paragraph",
                  "heading_1",
                  "heading_2",
                  "heading_3",
                  "bulleted_list_item",
                  "numbered_list_item"
                ],
                "title": "BlockProperty",
                "type": "string"
              },
              "bold": {
                "default": false,
                "description": "Indicates if the text is bold.",
                "examples": [
                  true,
                  false
                ],
                "title": "Bold",
                "type": "boolean"
              },
              "code": {
                "default": false,
                "description": "Indicates if the text is formatted as code.",
                "examples": [
                  true,
                  false
                ],
                "title": "Code",
                "type": "boolean"
              },
              "color": {
                "default": "default",
                "description": "The color of the text background or text itself.",
                "examples": [
                  "blue_background",
                  "yellow_background",
                  "gray",
                  "purple"
                ],
                "title": "Color",
                "type": "string"
              },
              "content": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "default": null,
                "description": "The textual content of the rich text object. Required for paragraph, heading_1, heading_2, heading_3, callout, todo, toggle, quote.",
                "examples": [
                  "Hello World",
                  "This is a heading",
                  "This is a paragraph"
                ],
                "title": "Content"
              },
              "italic": {
                "default": false,
                "description": "Indicates if the text is italic.",
                "examples": [
                  true,
                  false
                ],
                "title": "Italic",
                "type": "boolean"
              },
              "link": {
                "default": null,
                "description": "The URL of the rich text object or the file to be uploaded or image/video link",
                "examples": [
                  "https://www.google.com"
                ],
                "title": "Link",
                "type": "string"
              },
              "strikethrough": {
                "default": false,
                "description": "Indicates if the text has strikethrough.",
                "examples": [
                  true,
                  false
                ],
                "title": "Strikethrough",
                "type": "boolean"
              },
              "underline": {
                "default": false,
                "description": "Indicates if the text is underlined.",
                "examples": [
                  true,
                  false
                ],
                "title": "Underline",
                "type": "boolean"
              }
            },
            "title": "NotionRichText",
            "type": "object"
          },
          "title": "Child Blocks",
          "type": "array"
        },
        "cover": {
          "default": null,
          "description": "URL of an external image to set as the page cover. The URL must point to a publicly accessible image.",
          "examples": [
            "https://google.com/image.png"
          ],
          "title": "Cover",
          "type": "string"
        },
        "database_id": {
          "description": "Identifier (UUID) of the Notion database where the new page (row) will be inserted. This ID must correspond to an existing database accessible to the integration. Use the `NOTION_FETCH_DATA` action to find available database IDs.",
          "examples": [
            "59833787-2cf9-4fdf-8782-e53db20768a5"
          ],
          "title": "Database Id",
          "type": "string"
        },
        "icon": {
          "default": null,
          "description": "Emoji to be used as the page icon. Must be a single emoji character.",
          "examples": [
            "😻",
            "🤔"
          ],
          "title": "Icon",
          "type": "string"
        },
        "properties": {
          "default": [],
          "description": "Property values for the new page. IMPORTANT: This field requires a LIST of objects, not a dictionary. Each object in the list defines a property and must include: `name` (the exact name of the property as it appears in Notion), `type` (the property's data type), and `value` (the property's value, formatted as a string according to its type).\n\nCORRECT FORMAT EXAMPLE (a list of property objects):\n[\n  {\"name\": \"Title\", \"type\": \"title\", \"value\": \"My new task\"},\n  {\"name\": \"Status\", \"type\": \"select\", \"value\": \"In Progress\"},\n  {\"name\": \"Tags\", \"type\": \"multi_select\", \"value\": \"Work,Personal\"},\n  {\"name\": \"Due Date\", \"type\": \"date\", \"value\": \"2024-06-01T12:00:00.000-04:00\"},\n  {\"name\": \"Completed\", \"type\": \"checkbox\", \"value\": \"False\"}\n]\n\nINCORRECT FORMAT (e.g., a dictionary instead of a list):\n{\n  \"Title\": \"My new task\",\n  \"Status\": \"In Progress\"\n}\n\nValue formatting rules by property type:\n- `title` or `rich_text`: Plain text string (maximum 2000 characters).\n- `number`: String representation of a number (e.g., \"23.4\").\n- `select`: The name of an existing option for the select property (e.g., \"In Progress\").\n- `multi_select`: Comma-separated string of existing option names (e.g., \"Work,Personal\").\n- `date`: ISO 8601 formatted date string (e.g., \"2024-06-01T12:00:00.000-04:00\").\n- `people`: Comma-separated string of Notion user IDs.\n- `checkbox`: String \"True\" or \"False\".\n- `url`: A valid URL string.\n- `files`: Comma-separated string of URLs.\nProperties defined in the database schema but omitted from this list will be initialized with default or empty values. Ensure that property names and types correctly match the target database schema.",
          "examples": [
            "[{\"name\": \"Task Name\", \"type\": \"title\", \"value\": \"Finalize Q3 report\"}, {\"name\": \"Priority\", \"type\": \"select\", \"value\": \"High\"}]"
          ],
          "items": {
            "properties": {
              "name": {
                "description": "Name of the property",
                "title": "Name",
                "type": "string"
              },
              "type": {
                "description": "Type of the property. Type of the propertytitle, rich_text, number, select, multi_select, date, people, files, checkbox url, email, phone_number, formula, created_by, created_time, last_edited_by, last_edited_time",
                "enum": [
                  "title",
                  "rich_text",
                  "number",
                  "select",
                  "multi_select",
                  "date",
                  "people",
                  "files",
                  "checkbox",
                  "url",
                  "email",
                  "phone_number",
                  "formula",
                  "relation",
                  "rollup",
                  "created_time",
                  "created_by",
                  "last_edited_time",
                  "last_edited_by"
                ],
                "title": "PropertyType",
                "type": "string"
              },
              "value": {
                "description": "Value of the property, it will be dependent on the type of the property\nFor types --> value should be\n- title, rich_text - text ex. \"Hello World\" (IMPORTANT: max 2000 characters, longer text will be truncated)\n- number - number ex. 23.4\n- select - select ex. \"India\"\n- multi_select - multi_select comma separated values ex. \"India,USA\"\n- date - format ex. \"2021-05-11T11:00:00.000-04:00\",\n- people - comma separated ids of people ex. \"123,456\" (will be converted to array of user objects)\n- url - a url.\n- files - comma separated urls\n- checkbox - \"True\" or \"False\"\n",
                "title": "Value",
                "type": "string"
              }
            },
            "required": [
              "name",
              "type",
              "value"
            ],
            "title": "PropertyValues",
            "type": "object"
          },
          "title": "Properties",
          "type": "array"
        }
      },
      "required": [
        "database_id"
      ],
      "title": "InsertRowDatabaseRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_LIST_USERS",
    "description": "Retrieves a paginated list of users (excluding guests) from the notion workspace; the number of users returned per page may be less than the requested `page size`.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "page_size": {
          "default": 30,
          "description": "The desired number of users to retrieve per page. The maximum value is 100.",
          "title": "Page Size",
          "type": "integer"
        },
        "start_cursor": {
          "default": null,
          "description": "An optional cursor for pagination. If provided, fetches results starting after this cursor. If omitted, retrieves the first page of users. Use the 'next_cursor' value from a previous response to get the next page.",
          "title": "Start Cursor",
          "type": "string"
        }
      },
      "title": "ListUsersRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "NOTION_NOTION_UPDATE_BLOCK",
    "description": "Updates an existing notion block's textual content or type-specific properties (e.g., 'checked' status, 'color'), using its `block id` and the specified `block type`.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "description": "Input parameters for updating a Notion block.",
      "properties": {
        "additional_properties": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A dictionary of additional properties to apply to the block, specific to its type. These are merged into the block type's data object (e.g., into the 'paragraph' or 'to_do' object). Examples include `is_toggleable` (boolean) for heading blocks, `checked` (boolean) for 'to_do' blocks, or `color` (string, e.g., 'blue_background') for blocks supporting it. Consult Notion API documentation for supported properties within each block type object.",
          "examples": [
            "{\"checked\": true}",
            "{\"color\": \"blue_background\"}",
            "{\"is_toggleable\": true, \"color\": \"gray\"}"
          ],
          "title": "Additional Properties",
          "type": "object"
        },
        "block_id": {
          "description": "Identifier of the Notion block to be updated. To find a block's ID, other Notion actions that list or retrieve blocks can be used. For updating content within a page (which is also a block), its ID can be obtained using actions like `NOTION_FETCH_DATA` to get page IDs and titles.",
          "examples": [
            "a1b2c3d4-e5f6-7890-1234-567890abcdef"
          ],
          "title": "Block Id",
          "type": "string"
        },
        "block_type": {
          "description": "The type of the block to update. Must be one of the supported types: 'paragraph', 'heading_1', 'heading_2', 'heading_3', 'bulleted_list_item', 'numbered_list_item', 'to_do', 'toggle'. The content structure and available `additional_properties` depend on this type.",
          "examples": [
            "paragraph",
            "to_do",
            "heading_2"
          ],
          "title": "Block Type",
          "type": "string"
        },
        "content": {
          "description": "The new text content for the block. This is primarily used for text-based blocks like paragraphs, headings, and list items.",
          "examples": [
            "This is the updated line of text."
          ],
          "title": "Content",
          "type": "string"
        }
      },
      "required": [
        "block_id",
        "block_type",
        "content"
      ],
      "title": "UpdateBlockRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_QUERY_DATABASE",
    "description": "Queries a notion database for pages (rows), where rows are pages and columns are properties; ensure sort property names correspond to existing database properties.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "database_id": {
          "description": "Identifier of the Notion database to query. To discover available database IDs and their corresponding titles, you can use an action like `NOTION_FETCH_DATA` or inspect the database in Notion.",
          "title": "Database Id",
          "type": "string"
        },
        "page_size": {
          "default": 2,
          "description": "The maximum number of items (pages or rows) to return in a single response. Defaults to 2. The actual number of items returned may be less than this value.",
          "examples": [
            "10",
            "25",
            "100"
          ],
          "title": "Page Size",
          "type": "integer"
        },
        "sorts": {
          "default": null,
          "description": "A list of sort criteria to apply to the database query. Each criterion specifies a database property and the sort direction (ascending or descending). If omitted, the default order of the database is used.",
          "items": {
            "properties": {
              "ascending": {
                "description": "Specifies the sort direction. Set to `True` for ascending order, or `False` for descending order.",
                "title": "Ascending",
                "type": "boolean"
              },
              "property_name": {
                "description": "The name of the database property (column) to sort the results by.",
                "title": "Property Name",
                "type": "string"
              }
            },
            "required": [
              "property_name",
              "ascending"
            ],
            "title": "Sort",
            "type": "object"
          },
          "title": "Sorts",
          "type": "array"
        },
        "start_cursor": {
          "default": null,
          "description": "An opaque cursor for pagination, used to retrieve the next set of results. This value is obtained from the `next_cursor` field in a previous response. If omitted, retrieves results from the beginning.",
          "examples": [
            "abcdefgh-1234-5678-90ab-cdef12345678",
            "some-other-cursor-value"
          ],
          "title": "Start Cursor",
          "type": "string"
        }
      },
      "required": [
        "database_id"
      ],
      "title": "QueryDatabaseRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_SEARCH_NOTION_PAGE",
    "description": "Searches notion pages and databases by title; an empty query lists all accessible items, useful for discovering ids or as a fallback when a specific query yields no results.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "direction": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "Specifies the sort direction for the results. Required if `timestamp` is provided. Valid values are `ascending` or `descending`.",
          "examples": [
            "ascending",
            "descending"
          ],
          "title": "Direction",
          "type": "string"
        },
        "filter_property": {
          "default": "object",
          "description": "The property to filter the search results by. Currently, the only supported value is `object`, which filters by the type specified in `filter_value`. Defaults to `object`.",
          "examples": [
            "object"
          ],
          "title": "Filter Property",
          "type": "string"
        },
        "filter_value": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": "page",
          "description": "Filters the search results by object type. Valid values are `page` or `database`. Defaults to `page`.",
          "examples": [
            "page",
            "database"
          ],
          "title": "Filter Value",
          "type": "string"
        },
        "page_size": {
          "anyOf": [
            {
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "default": 2,
          "description": "The number of items to include in the response. Must be an integer between 1 and 100, inclusive. Defaults to 2.",
          "title": "Page Size",
          "type": "integer"
        },
        "query": {
          "default": "",
          "description": "The text to search for in page and database titles. If an empty string is provided, all pages and databases accessible to the integration will be returned.",
          "title": "Query",
          "type": "string"
        },
        "start_cursor": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "An opaque cursor value returned in a previous response. If provided, the API will return results starting after this cursor, enabling pagination. If `None` or an empty string, results start from the beginning.",
          "title": "Start Cursor",
          "type": "string"
        },
        "timestamp": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "The timestamp field to sort the results by. Currently, the only supported value is `last_edited_time`. If provided, `direction` must also be specified.",
          "title": "Timestamp",
          "type": "string"
        }
      },
      "title": "SearchNotionPageRequest",
      "type": "object",
      "required": []
    }
  },
  {
    "name": "NOTION_UPDATE_ROW_DATABASE",
    "description": "Updates or archives an existing notion database row (page) using its `row id`, allowing modification of its icon, cover, and/or properties; ensure the target page is accessible and property details (names/ids and values) align with the database schema and specified formats.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "cover": {
          "default": null,
          "description": "URL of an external image to be used as the cover for the page (e.g., 'https://google.com/image.png').",
          "examples": [
            "https://google.com/image.png"
          ],
          "title": "Cover",
          "type": "string"
        },
        "delete_row": {
          "default": false,
          "description": "If true, the row (page) will be archived, effectively deleting it from the active view. If false, the row will be updated with other provided data.",
          "examples": [
            "True",
            "False"
          ],
          "title": "Delete Row",
          "type": "boolean"
        },
        "icon": {
          "default": null,
          "description": "The emoji to be used as the icon for the page. Must be a single emoji character (e.g., '😻', '🤔').",
          "examples": [
            "😻",
            "🤔"
          ],
          "title": "Icon",
          "type": "string"
        },
        "properties": {
          "default": [],
          "description": "A list of property values to update for the page. Each item in this list defines a specific property (by its name or ID) and the new value it should take. The format of the `value` depends on the property's type; refer to the main action documentation for detailed formatting guidelines. Properties not included in this list will retain their current values.",
          "items": {
            "properties": {
              "name": {
                "description": "Name of the property",
                "title": "Name",
                "type": "string"
              },
              "type": {
                "description": "Type of the property. Type of the propertytitle, rich_text, number, select, multi_select, date, people, files, checkbox url, email, phone_number, formula, created_by, created_time, last_edited_by, last_edited_time",
                "enum": [
                  "title",
                  "rich_text",
                  "number",
                  "select",
                  "multi_select",
                  "date",
                  "people",
                  "files",
                  "checkbox",
                  "url",
                  "email",
                  "phone_number",
                  "formula",
                  "relation",
                  "rollup",
                  "created_time",
                  "created_by",
                  "last_edited_time",
                  "last_edited_by"
                ],
                "title": "PropertyType",
                "type": "string"
              },
              "value": {
                "description": "Value of the property, it will be dependent on the type of the property\nFor types --> value should be\n- title, rich_text - text ex. \"Hello World\" (IMPORTANT: max 2000 characters, longer text will be truncated)\n- number - number ex. 23.4\n- select - select ex. \"India\"\n- multi_select - multi_select comma separated values ex. \"India,USA\"\n- date - format ex. \"2021-05-11T11:00:00.000-04:00\",\n- people - comma separated ids of people ex. \"123,456\" (will be converted to array of user objects)\n- url - a url.\n- files - comma separated urls\n- checkbox - \"True\" or \"False\"\n",
                "title": "Value",
                "type": "string"
              }
            },
            "required": [
              "name",
              "type",
              "value"
            ],
            "title": "PropertyValues",
            "type": "object"
          },
          "title": "Properties",
          "type": "array"
        },
        "row_id": {
          "description": "Identifier (UUID) of the database row (page) to be updated. This ID must be a valid UUID string (e.g., '59833787-2cf9-4fdf-8782-e53db20768a5') corresponding to an existing Notion page. In Notion, database rows are treated as pages.",
          "examples": [
            "59833787-2cf9-4fdf-8782-e53db20768a5"
          ],
          "title": "Row Id",
          "type": "string"
        }
      },
      "required": [
        "row_id"
      ],
      "title": "UpdateRowDatabaseRequest",
      "type": "object"
    }
  },
  {
    "name": "NOTION_UPDATE_SCHEMA_DATABASE",
    "description": "Updates an existing notion database's title, description, and/or properties; at least one of these attributes must be provided to effect a change.",
    "type": "client",
    "waitForResponse": true,
    "timeoutSeconds": 30,
    "parameters": {
      "properties": {
        "database_id": {
          "description": "Identifier of the Notion database to update. Use the `NOTION_FETCH_DATA` action or similar tools to get available database IDs and their titles.",
          "examples": [
            "d9824bdc-8445-4327-be8b-554d41f30b60"
          ],
          "title": "Database Id",
          "type": "string"
        },
        "description": {
          "default": null,
          "description": "New description for the database. If this field is not provided or is set to `None` (the default value), the database's existing description will remain unchanged.",
          "title": "Description",
          "type": "string"
        },
        "properties": {
          "default": [],
          "description": "A list of objects for updating database properties (columns). Each object should describe a single property update, typically by providing the property's name (as a key) and its new schema object (as a value), conforming to Notion's property schema structure. Property names are case-sensitive: match existing names to update, or use new names to add properties. An empty list (default) signifies no property changes.",
          "items": {
            "properties": {
              "name": {
                "description": "Name of the property",
                "title": "Name",
                "type": "string"
              },
              "new_type": {
                "default": null,
                "description": "Default is None, If None the type remains the same. New Type of the property title, rich_text, number, select, multi_select, date, people, files, checkbox url, email, phone_number, formula, created_by, created_time, last_edited_by, last_edited_time",
                "title": "New Type",
                "type": "string"
              },
              "remove": {
                "default": false,
                "description": "Remove the property",
                "title": "Remove",
                "type": "boolean"
              },
              "rename": {
                "default": null,
                "description": "New name of the property, default is None. If None, the name remains the same.",
                "title": "Rename",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "title": "PropertySchemaUpdate",
            "type": "object"
          },
          "title": "Properties",
          "type": "array"
        },
        "title": {
          "default": null,
          "description": "New title for the database. If this field is not provided or is set to `None` (the default value), the database's existing title will remain unchanged.",
          "title": "Title",
          "type": "string"
        }
      },
      "required": [
        "database_id"
      ],
      "title": "UpdateSchemaDatabaseRequest",
      "type": "object"
    }
  }
]